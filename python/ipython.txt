# notebook extension
https://github.com/Calysto/notebook-extensions/
-> Follow instructions

ipython install-nbextensions url/path
  --user  // install to ~/.ipython/nbextensions

## loading
### custom.js
~/.ipython/profile_default/static/custom/custom.js
IPython.load_extensions('calico-spell-check', 'calico-document-tools', 'calico-cell-tools');
### within notebook
%%javascript
IPython.load_extensions('calico-spell-check', 'calico-document-tools', 'calico-cell-tools');


# selected magics
%run -d b10 ./script.py
%pycat file.txt
%load file  // load file into cell
%less // faster than %pycat
%reset  // reset workspace
%% file script.py // write cell content to file
%% bash // content of file is bash script



# autoreload modules; import
%load_ext autoreload
%autoreload 2
c = MyClass() // MyClass automatically reimport; import my_class not required


# nbconvert
ipython nbconvert nb.ipynb
--to html, latex, markdown
--template basic, article
--post PDF, server
ipython nbconvert --to latex --template article --post PDF nb.ipynb

# slideshow
* http://www.slideviper.oquanta.info/tutorial/slideshow_tutorial_slides.html
* select 'slideshow' in 'cell toolbar'
ipython nbconvert --to slides --post serve nb.ipynb



# Display
from IPython.display import display
display(data_frame) // nice output of DataFrame

## HTML
from IPython.display import HTML
HTML(url)
HTML('<iframe src=www.google.com width=1000 height=700/>')

## Images
<img src='file' style='float:left; width=30%'/>
from IPython.display import Image
Image(path, ...)
  path  // url or filename
  width='100%', height= // size in html

## Videos
from IPython.display import YouTubeVideo
YouTubeVideo('ucJ2-5a2CAA', width=, height=)



# Shell commands
!ls
a = !ls -l  // SList
len(a)
a[0]
a.s // concat spaces
a.n // concat newlines
a.grep(regex) // grep lines matching regex
a.fields()  // split lines by spaces
!echo {1/3} // any python expression in {}
!echo $a  // print variable




# ipycache
%load_ext ipycache
%%cache [options] data.pk1 var1, var2, var3
-f  // force execution, overwrite existing file
-d dir // directory for cache files
-s  // silent

# profiles
ipython locate  // ~/.ipython
ipython locate profile  // ~/.ipython/profile_default
ipython profile create NAME // create new profile
profile_default/startup/FILE.py // scripts executed at startup in alphnum order

# ipdb output redirect
/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/ipdb/__main__.py
comment out update_stdout()
https://github.com/ipython/ipython/issues/5306


# ipython
%quickref
?
help()
?object, object?
string.split?
command history: c-p, c-n, c-r

# Arguments
--pdb // start ipdb on exception
--pylab // import numpy, matplotlib

# pylab
%pylab gui
--pylab gui
* gui: inline, osx, gtk, q4
* import matplotlib.pylab
* import numpy
* interactive plotting

# system commands
!ls
a = !ls
a = !cat {filename}
!echo 1+2={1+2}

# kernel / frontend
https://github.com/ipython/ipython/wiki/Cookbook:-Connecting-to-a-remote-kernel-via-ssh
ipython locate  // kernel directory
ipython kernel  // start kernel without frontent
ipython qtconsole|console|notebook  // start kernel with frontent
ipython qtconsole|console --existing file.json  // connect to existing kernel
%connect_info // connection info -> file.json
%qtconsole  // start qtconsole connected to current kernel
ipython console --ssh host --existing file.json // file.json must be copied from server to client machine
quit() == exit()  // exit frontend and kernel
quit(True) == exit(True)  // exit frontend and keep kernel alive

# qtconsole
%guiref
%load file.py // load and edit file
c-return  // multiline editings
s-return  // execute multiline block
m-<>      // move to beginning/end block
c-a,e     // move to beginning/end line
ipython qtconsole --paging [vsplit|hsplit]
c-o // switch pages
%less, %man // show results in page
c-t // new tab with new kernel
c-s-t // new tab with existing kernel


# magics
%magic  // show magic help
%magic $var // expand variable name
%magic {expression} // expand expression

%pdoc // show python doc of object
%pdef // show function (class) definition
%psource  // show source code
%pfile object // show file that contains object
%pycat file.py  // show syntax highlighted file
%pysave file.py 1-10  // save lines 1-10 to file.py
%edit file  // edit file in editor
%%file file.py -a // write/append code to file
%%bash cmd  // execute shell command
%who  // defined objects
%whos // information about all objects
%time commmand  // execute command once and measure time
%timeit command // execute command several times and measure time
  -n fitted if not specified // number of executions per loop; cmd is executed -n times and then the mean is computed
  -r  3 // how oven the loop is repeated to estimate minimum of means
        // the minimum lower-bounds the runtime; higher runtime most likely because of something else (https://docs.python.org/3/library/timeit.html#timeit.Timer.repeat)
%cd dir // change directory
%pwd // show current directory
%debug
%alias funname echo 'Hello %s and %s'!  // magic for system command (bash command)
  funname 'Foo' 'Bar'
%clear  // clear screen
%reset  // reset workspace
%reset_selective  regex // delete specific objects
%reset_selective -f a // delete all objects containing a
%reset_selective -f ^a$ // delete just a


# defining magics
from IPython.core.magic import register_line_magic
@register_line_magic
def mymagic(a, b):
  ...
%mymagic 1, 2 // b == None
mymagic(1, 2) // a == 1 and b == 2


# running file/module
%run file.py arg1 arg2
%run -d // debug mode: stop on first line
%run -d -b 10 // debug mode, breakpoint line 10
%run -m module
%run -t // time command
%run -p // profiler

# browsing command history
%hist
%hist -n  // show line numbers
%hist 100-105 // range line numbers
%hist -g cmd  // all commands containing cmd
%hist -f tmp -l 5 // save last 5 lines to tmp
%rerun 1-5 6
%rerun -g cmd
%rerun -l 5 // last 5 lines
%macro name 100-105

# automatic parenthesis, quotes
/fun a b // fun(a, b)
,fun a b // fun('a', 'b')
;fun a b // fun('a b')


# logging command history
%logstart filename.py [over]
%logoff
ipython --logfile filename.py

# debugging
%run -d file  // start in debug mode
%debug  // open debug mode after exception
%pdb  // automatically start debug on exception
%tb // trace back

# edit, macro, save
## %edit
%edit // open file and execute at the end
%edit fun // edit function definition
%edit 1-3 5 // edit lines
%edit -x  // no not execute

## %macro
%macro name 1-3 4 // define macro
name

## %save
%save file 1-3 4  // save lines to file

# rpy2
http://nbviewer.ipython.org/github/ipython/ipython/blob/master/examples/notebooks/R%20Magics.ipynb
%R rcode  // execute inline code
%%R
  rcode1
  rcode2
%Rpush x z y  // push variables to python
xx = %Rget x  // pull variable from R to new variable
%Rpull x  //  pull variable x from R to existing variable x in python
