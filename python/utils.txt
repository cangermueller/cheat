# HTTP server
python -m http.server [port]

# max/min integer
min = -sys.maxsize
max = sys.maxsize

# sort
## sort by 2nd entry
sorted(tuples, key=lambda x: x[1])
## order
[y[0] for y in sorted(enumerate(t), key=lambda x: x[1])]
## order numpy array
x.argsort()
## reverse argsort
a = x.argsort()
ar = np.empty(len(a))
ar[a] = np.arange(len(a))


# Checking if string is numeric

## check if string is positive integer
* Use str.isdigit() == str.isnumeric() == str.isdecimal()
* Python2: convert to unicode - unicode(str).isdecimal()
'15'.isdigit() // True -> only positive
'-15'.isdigit() // False

## Checking if number if float
* Use exception or float
try:
  float(value)
  return 'float32'
except Exception as _:
  return 'S32'


## Differentiating between int and float
def is_int(d):
    return d == round(d)




# supressing warnings
import warnings
with warnings.catch_warnings():
    warnings.simplefilter('ignore')

# minimum / maximum (integer) value
max = sys.maxsize
min = -sys.maxsize

# determine which element in boolean array is true
np.where(np.array(a) == value)[0]


# Instantiate class from string
c = globals()[s]()
globals() // dict of global variables
locals() // dict of local variables
dir() // list of variable names


# Lambda
* Scope is evaluated when lambda is called, not when lambda is defined!

d = {}
for i in range(10):
  d[i] = lambda: i
d[0]() -> 9

d = {}
for i in range(10):
  d[i] = lambda x=i: x  // default variables are are evaluated with lambda is defined
d[0]() -> 0


# Testing if object is iterable
isinstance(value, collections.Iterable)
