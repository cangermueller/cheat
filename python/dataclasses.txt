# typing.NamedTuple

class MyClass(typing.NamedTuple):
  a: int
  b: int = 3


## NamedTuple vs. dataclass
* NamedTuple based on tuple(), dataclass on dict()
 -> Compatible with TF
 -> can be unpacked via *foo and converted to tuple via tuple(foo)
* NamedTuple: less memory
* NamedTuple: slightly higher access time
* NamedTuple: does not support inheritance and other features like __post_init__




# dataclasses
https://docs.python.org/3/library/dataclasses.html#module-dataclasses

from dataclasses import dataclass

@dataclass
class MyClass(object):
  a: int
  b: List[int]
  c: int = 0 // optional
  d: dict = field(default_factory=dict) // initialize with empty dict

  def extra_method(self):
    pass


## dataclass(...)
  frozen=True // make immutable


## field(...)
  init=True // whether to include the field in __init__
  eq=True // whether to include the field in __eq__

## __post_init__
@dataclass
class C:
    a: float
    b: float
    c: float = field(init=False)

    def __post_init__(self):
        self.c = self.a + self.b



## Functions
asdict(object) -> dict
astuple(object)
replace(object, **changes) // copy + apply changes






# attr

@attr.s(...)
class MyClass(object):
  a = attr.ib(..)


attr.s(...)
  frozen=False
  slots=False
  eq=True


attrs.ib(...)
  default=1
  type=int
  converter=lambda x: int(x)
