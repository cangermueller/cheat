# typing.NamedTuple

class MyClass(typing.NamedTuple):
  a: int
  b: int = 3

  def __new__(cls, a, b): // only works with collections.namedtuple !!!
    return cls(a + 1, b) # post init


_asdict() # convert to dict
_replace(a=1) # replaces attribute and returns new instance (not inplace)
_make([4, 5]) # creates a new instance from a sequence
_fields // ['a', 'b']
_source // shows source code


## NamedTuple vs. dataclass
* NamedTuple based on tuple(), dataclass on dict()
 -> Compatible with TF
 -> can be unpacked via *foo and converted to tuple via tuple(foo)
* NamedTuple: less memory
* NamedTuple: slightly higher access time
* NamedTuple: does not support inheritance and other features like __post_init__


# Inheritance
* Class with non-default attributes cannot inherit from class with default
  attributes: stackoverflow.com/q/51575931

# Attributes
@dataclasses.dataclass(...)
  * frozen=True // immutable
  * slots=True
    // pre-allocates memory for attributes instead of storing in __dict__
    // faster and more memory efficient
    // does not support multi-class inheritance / mixins
    //   child cannot inherit multiple classes with slots=True


# Example
@dataclass
class MyClass(object):
  a: int
  b: List[int]
  c: int = 0 // optional
  d: dict = field(default_factory=dict) // initialize with empty dict

  def extra_method(self):
    pass

# field(...)
  init=True // whether to include the field in __init__
  eq=True // whether to include the field in __eq__


# __post_init__
@dataclass
class C:
    a: float
    b: float
    c: float = field(init=False)

    def __post_init__(self):
        self.c = self.a + self.b

# Functions
is_dataclass(obect)  // check if isinstance dataclass
asdict(object) -> dict
  * creates a deep copy; use `vars(self).copy()` to create a shallow copy
astuple(object)
  * creates a deep copy
replace(object, **changes) // copy + apply changes
  * does not create a deep copy
