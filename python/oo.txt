# Special methods
http://docs.python.org/2/reference/datamodel.html#special-method-names
__init__  // constructor
__del__   // destructor
__getitem__ // a[i]
__setitem__ // a[i] = v
__len__   // len(a)
__repr_   // unique representation of object
__str__   // readable representation; str(s)
__add__   // a + b
__sub__   // a - b
__cmp__   // a == b
__call__(self, x)  // object(x); call object as function
  call() in Python2
__next__(self) // next(x); iterator
  next() in Python2
__enter__, __exit__ // see context manager

# Special attributes
__dir__
  * all object names: __init__, method(), __str__(), ...
  * dir(Class)
  * list()
__dict__
  * Class.__dict__ // meta info about class
  * Class().__dict__ // member variables of class instance; different from class.__dict__
  * vars(Class)
self.__class__.__name__ // Name of class as string

# Attributes
dir(object) // list names all attributes
  __dict__ and additional information
  __dict__ is one attribute
o = Class()
hasattr(o, 'a')
getattr(o, 'a')
setattr(o, 'a', v)


# Checking type and inheritance
import inspect
inspect.isclass(MyClass) // check if object is class like isinstance
issubclass(MyClass, BaseClass) // check if MyClass inherits at some point from BaseClass


# Private: double underscore
__private_variable (or _private_variable)
__private_constant (or _private_constant)
__private_method (or _private_method)

# Copying instances
import copy
copy.copy(x)
copy.deepcopy(x)

# overriding
class Parent(object):
  def __init__(self, a):
    self.a = a

class Child(Parent):

c = Child(1)
  * Inherits constructor of parent!
  * Requires a argument!

## overriding constructor and methods
class Child(Parent):
  def __init__(self, a, **kwargs):
    self.a = a
    super(Child, self).__init__(*kwargs)  // call parent constructor

  def method(self):
    super(Child, self).method() // call parent method



# Static variables
class MyClass(object):
  value = 10

c1 = MyClass()
c1.value = 100
print(MyClass.value) # 10
print(c1.value) # 100
-> Instances inherit class variables, i.e. self.value is initialized with Class.value
-> c1.value instance specific

MyClass.value = 11
print(MyClass.value) # 11
print(c1.value) # 100
-> MyClass.value is class specific!

c1.__class__.value = 200
print(MyClass.value) # 11
print(c1.value) # 100
-> c1.__class__.value = x is same as MyClass.value = x



# Decorators
@staticmethod
def static():
  // Class.static() or object.static()
  // no self (class) argument
  // like static C++

@classmethod
def static(self):
  // Class.static() or object.static()
  // has self (class) argument


@property // getter
def value(self):
  return self._value

@value.setter // setter
def value(self, new):
  self._value = new


# Multiple constructors
class Class:
  def __init__(self, data):
    default constructor

  @classmethod
  def from_data(cls, filename):
    data = read(filename)
    cls(data)


# Abstract classes
from abc import ABCMeta, abstractmethod

class MyClass(metaclass=ABCMeta):

  @abstractmethod
  def method(self, ...):  // at least one method must be decorated abstract
    pass


# Context manager
def myfile(object):

  def __init__(self, filename):
    self.fh = open(filename, 'r')

  def __enter__(self): // called at beginning of with statement
    return self.fh

  def __exit__(self): // called at end of with statement
    self.fh.close()

with myfile('file.txt'):
  ...



# Multi-class inheritance

class A:
  def __init__(self, domain, a=1):
    self._domain = domain
    self._a = a

  def a(self):
    return self._domain + self._a

class B:
  def __init__(self, domain, b=2):
    self._domain = domain
    self._b = b

  def b(self):
    return self._domain + self._b


class C(B, A):
  def __init__(self, domain, a=1, b=2):
    super().__init__(domain, a=1, b=2) # Does not work since parent __init__ have different arguments
    A.__init__(self, domain=domain, a=a)
    B.__init__(self, domain=domain, b=b)


## Diagram
A  B
 \/
 C

# Call order
* Like in definition C(B, A)
C -> B -> A


# Calling __init__ (or other methods)
* By default (without __init__), calles __init__ of all parent classes
* super().__init__(*args, **kwargs) passes the same args to *all* parent classes
* use A.__init__(self, ...) and B.__init__(self, ...) to pass different arguments to different parents
