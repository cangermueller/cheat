# Misc
from typing import TYPE_CHECKING
if TYPE_CHECKING  // true if type checking is enabled


# Iterable <- Collection <- Sequence
Iterable: allows iterating only once (e.g. function with yield)
Container: has __contains__
|- Collection: allows iterating multiple times (e.g. set)
  * Is also an iterable
  |-Sequence: is ordered and allows using seq[i] (e.g. list, tuple)


# Iterable vs. Iterator vs. Generator
Iterable <- Iterator <- Generator
    ^------ Sequence <- List

Iterable:
 - has __iter__(self) method that returns an Iterator
 - can be used in for loop like for x in iterable:  // returns iterator
 - can be converted to Iterator by `iter(iterable)` // calls iterable.__iter__
Iterator:
 - An Iterable that also has a __next()__ method
 - Examples:
    * class with __iter__() and __next__() method
    * enumerate, zip
Generator:
 - An Iterator constructed with a yield statement
Sequence:
 - An Iterable with a __getitem__() method
 - Example: List, Tuple


Sequences: objects that iterate via __getitem__; ordered; Sequence -> Iterable
Tuple[str, int]: Tuple of two elements; Sequence / Iterable does not allow specifying the length!
Tuple[str, ...]: Tuple of variable # elements

# Annotating a function with yield
* Iterator[yield_type] suited in most cases
* Generator[yield_type, send_type, return_type] can be when using different send, yield, return types
* https://stackoverflow.com/questions/38419654/proper-type-annotation-of-python-functions-with-yield

def my_iterator() -> Iterator[int]
  for i in range(10):
    yield i

def echo_round() -> Generator[int, float, str]:
    res = yield
    while res:
        res = yield round(res)
    return 'OK'


# pytype: disable=attribute-error


# Passing a class
foo_cls:  Type[Foo]


# TypeVar
* Templates / Generics
* https://stackoverflow.com/questions/59933946/difference-between-typevart-a-b-and-typevart-bound-uniona-b

FooOrBar = TypeVar('FooOrBar', Foo, Bar)
def myfun(a: FooOrBar) -> FooOrBar:
  * Returns that same type passed as the input (Foo -> Foo; Bar -> Bar)

FooOrBar = TypeVar('FooOrBar', bounds=Union[Foo, Bar])
 * bounds allows passing any combination, e.g [Foo, Foo, Bar]
 * Without bounds, only [Foo, Foo, Foo] or [Bar, Bar, Bar] allowed
def return_last(a: List[FooOrBar]) -> FooOrBar:
  return a[-1]

## invariance, covariance, contravariance
* stackoverflow.com/q/61568462
* only applicable to generics such as list[Base]
* invariance (default): list[Derrived] can be only passed to list[Derived] (and Base to Base)
* covariance=True: list[Derived] can be passed to list[Base]
* contravariance=True: list[Base] can be passed to list[Derived]


# TypeVarTuple
* To specify an unbounded number of variables with a certain type
* Can be only used inside tuple[...] with *Name.

## Example1
Value = TypeVar('Value', int, float)
Values = TypeVarTuple('Values', int | float | str)

def swap_first_last(values: tuple[Value, *Values]) -> tuple[*Values, Value]:
  return (*values[1:], values[0])


## Example2
DType = TypeVar('Dtype', str, np.dtype)
Shape = TypeVarTuple(Shape)

class Array[Generic[DType, *Shape]]:

  def __init__(dtype: DType, shape: tuple[*shape]):
    self._array = np.empty(dtype=dtype, shape=shape)


class Height:
  ...

array = Array[np.dtype, Height](np.float32, (3, Height(10))):


# NewType
* For defining new primitive types

UserId = NewType('UserId', int)
BookId = NewType('BookId', int)

def create(user_id: USER_ID, book_id: BOOK_ID):
  ...

create(UserId(1), BookId(2)) // works
create(BookId(1), UserId(2)) // fails
create(1, 2) // works since UserId and BookId are sub-classes of int


# TypeAlias
* Use to explicitly annotate a variable to be an alias
* In particular usefor for forward references
from foo import bar
MyBar: TypeAlias = bar.Bar

IntClass: TypeAlias[int] = 'Class[int]'
T = TypeVar('T')
class Class(Generic[T]):
  @classmethod
  def create_int_instance(cls) -> IntClass:
    ...



# casting
* does not do anything
* only signals the type checker that something as the desired type
typing.cast(int, '12') == '12'
type(typing.cast(int, '12')) == int


# TypedDict
* Mapping with type annotations

class Foo(TypedDict):
  a: int
  b: Optional[int]


f = Foo(a=1, b=2)
type(f) -> dict
isinstance(f, dict) -> true


## total=False
By default, all keys must be present, but `None` is okay if annotate as Optional

f = Foo(a=1, b=None) // no error
f = Foo(a=1) // error

class Foo(TypedDict, total=False):
  // Some keys can be missing
  a: int
  b: int

f = Foo(a=1)  // no error


# Protocol
* For annotating complex callables for *args, or objects without clear base class (e.g. sklearn estimator)

from typing_extensions import Protocol

class ImportanceFn(Protocol):
  """A function for computing importances given features x and labels y."""

  def __call__(
      self,
      x: pd.DataFrame,
      y: ArrayLike,
      random_state: RandomState | None = None,
      **kwargs,
  ) -> pd.DataFrame:
    ...



# ClassVar
* Marks a variable as class variable
@dataclasses.dataclass
class Data:
  a: ClassVar[int] = 10
  b: int = 20

d = Data()
d.a = 0 # failure since class variable
d.b = 0 # no failure since instance variable

# LiteralString
def get_flags(platform: LiteralString):
get_flags('vl') // okay
plaform = 'vl'
get_flags(platform) // fails; not a literal string



# Literal
* Can only be called with one of the specified values
* Literal[ALLOWED_VALUES]
* Literal[int] does not work

def get_flags(platform: Literal[1, 2, 3]):
  # can only be called with 1, 2, 3

# Can be only called with 'pl' or 'pf'
def get_flags(platform: Literal['pl', 'pf']):
  # Can be only called with 'pl' or 'pf'


# overload
* Allows using different input/return type annotation
* Only for type checking; only one implementation possible

@overload
def fn(a: int) -> list[int]:
  ...

@overload
def fn(a: float) -> float:
  ...

def fn(a):
  if isinstance(a, int):
    return [a] * a
  else:
    return a


# Callable
Callable[..., Foo]  // Any number of input arguments
Callable[[A, ..., Foo]  // A followed by any number of arguments


# Annotated
* Enables adding metadata to variables
* Can be retrieved at runtime with x.__metadata__
* Metadata is not used for type checking
x = Annotated[int, 'foo', 'bar']
x.__metadata__ == ('foo', 'bar')
