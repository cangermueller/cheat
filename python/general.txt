# Flushing print / stdout
for i in ...:
  print(...)
  sys.stdout.flush()


# Arguments
python [args]
-m  module // load module
-u // unbuffered stdout; flush stdout


# Install
./configure --enable-shared --prefix=$STOW/python3.4.2
## $HOME/opt is a directory error
* Modify Makefile
OPT=		-DNDEBUG /homes/angermue/opt
-->
OPT=		-DNDEBUG

# Suppress warnings
import warnings
with warnings.catch_warnings():
    warnings.simplefilter('ignore')
    ...

# Maximum recursion depth
sys.setrecursionlimit(x)

# Environment variables
os.getenv('HOME'[, default])
os.environ['HOME']
os.environ.get('HOME')
os.environ['FOO'] = 'bar'

# execute system/shell command
os.system(cmd)

# Array letters, characters
import string
list(string.letters[:10])

# Size objects/memory usage
sys.getsizeof(a)
a.nbytes  // numpy memory

# Free memory
del my_var
import gc
gc.collect()

# scope information
dir() // all names in current scope
locals()  // dictionary of local variables
globals() // dictionary of global variables
vars(module)['fun01'] // get function from module by name

# generators
* like iterators, but more efficients
* not all objects are kept in memory
* iteratable only once
for i in xrange(100)
squares = (x**2 for x in xrange(10))
for s in squares: // works
  print s
for s in squares: // does not work
  print s
## yield
def irange(n):
  i = 0
  while i < n:
    yield i   // jump to code of caller
    i = i + 1
for i in irange(10):
  yield jumps to this position

# References
b = a // only copies references -> same value
b = list(a) // copy value a
import copy;
b = copy.deepcopy(a)  // copy by value
b = copy.copy(a)  // shallow copy; members not copied
a == b  // compare values
a is b  // compare references

# Functions
def fun(a, b=1, *args, **kwargs):
  fun2(*args, **kwargs) // not fun2(args, kwargs)!
*args // tuple of unnamed args; args[1]
**kwargs  // dict of names args; kwargs.keys()
fun(*list)  // convert list to args
fun(**dict)  // convert dict to kwargs


# Modules
import utils  // namespace utils
from utils import * // into current namespace
from utils import a as alias
## Reloading modules
%load_ext autoreload
%autoreload 2 // reload all but excluded modules
%autoreload 1 // reload only included modules
%aimport  // modules automatically imported
%aimport foo  // include foo
%aimport -foo // exclude foo
## Alternative
from IPython.lib.deepreload import reload; reload(module)

# Packages
* For structuring modules; avoiding name collisions
* Require __init__.py for being recognized as packages!
* package: contains modules
* modules: contains classes, functions
pkg/
  __init__.py // must exist, but can be empty
  __main__.py // optional, run by 'python pkg'
  spkg1/
    __init__.py
    module.py
  spkg2/
    __init__.py
    module.py
  module.py
import pkg.spkg1.module
import pkg.spkg2.module
import pkg.module

# Bit operations
-> Same as in C
~, |, &, <<, >>

# Genenerators / iterators
* Iterator is general concept
* Generator is one form (yield) of iterator
* Iterator: class with __iter__(self), __next__(self)
* Generator: yield

## Iterator
* As class:
  def __iter__(self):
   self.i = 0
   return self
  def __next__(self):
    if self.i == n:
      raise StopIteration()
    v = self.values[self.i]
    self.i += 1
    return v

## Generator
def myiter(n):
  i = 0
  while i < n:
    i += 1
    yield i

# assignment expression
* https://peps.python.org/pep-0572/#syntax-and-semantics
if (a:= foo()) > 3:
  print(a)

while (line:= f.readlines()):
 print(line)


# Ellipsis / ... / three dots

## Use as placeholder

@abstractmethod
def foo(self):
  ... // same as `pass`

def foo(self, arg: ...): // type annotation unclear


## As type
values: tuple[int, ...]


# match/case
docs.python.org/3/whatsnew/3.10.html#pep-634-structural-pattern-matching

match value:
  case 1:
    print('1')
  case [1]:
    print('list[1] but not 1')
  case (1,):  # tuple and list (different types) are treated differently
    print('tuple(1) not list(1')
  # case Sequence[1];  # there is no common sequence; use `match tuple(value) instead`
  #  print('any sequence with 1')
  case x if value in [2, 3]:  # guard clause; x captures value
    print(f'2 or 3: {x}')
  case (2, 3):
    print('tuple(2, 3)')
  case (2, x):  # x captures 2nd value
    print(f'tuple with two elements. 2nd is {x}')
  case (2, *_):
    print('tuple with more elements')
  case str():
    print('some string')
  case float():
    print('some float')
  case int():
    print('some int')
  case _:
    print('else')
