import re

r"string" // raw string

m = re.search(pattern, string, flags)
m is None // no match

re.match(pattern, string, flags)
  * must match at beginning
  * 'abc' does not match 'xxx abc xxx'
  * 'xxx' does not match 'xxx abc xxx'
re.search(pattern, string, flags)
  * pattern must partially match anywhere
  * 'abc' matches 'xxx abc xxx'
    -> '.*abc' not needed!
  * same as re.search(^pattern, ...)
re.fullmatch(pattern, string, flags
  * pattern must match entire string
  * ^.*XXX.*$ unncessary
for m in re.finditer(pattern, string)  // like search, but iter of all hits
re.findall(pattern, string) // all matches as str in array
len(re.findall(...)) // count
re.split(p, s)  // split by p; s.split(p) does not support re
re.sub(p, r, s) // subst ALL p in s by r and returns substituted string
  re.sub(r'(.*\.)(solver)$', r'\g<1>\g<2>_cls', idx) // reference groups
  re.sub(r'(.)\1{2,}', r'\1', 'aaabbbccc')  // replace duplicate chars
re.subn() // like sub, but return number of replacements


# Groups
m.groups() // returns all groups as tuple
  * length == number of (...) parts in re
m.group() // everything
m.group(0)  // everything
m.group(1)  // group 1
m.start()
m.end()

## Groups dict
m = re.search(r'^(?P<start>\d+)(-(?P<stop>\d+))?$', sel)
d = m.groupdict()
d['start'], d['stop']
  * d['stop'] == None if missing



# Flags
re.I  // insensitive
re.M  // multi line; ^ is beginning of line, not string
re.S  // single line; . matches \n


# Grep lines from file
file = open(...)
for line in file:
  m = re.search('.../([^/]+)/...')
  if m:
    lines.append(m.group(1))

# Compiling regex
* Can clearly speed-up code!
regex = re.compile(r'REGEX')
regex.(match|search|fullmatch)


# Not
re.search('^((?!abc).)*$', 'cccabcccc')  // does not match
