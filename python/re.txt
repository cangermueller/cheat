import re

m = re.search(pattern, string, flags)
m is None // no match

re.match(pattern, string, flags)
  * must match at beginning
  * 'abc' does not match 'xxx abc xxx'
  * 'xxx' does not match 'xxx abc xxx'
re.search(pattern, string, flags)
  * pattern must partially match anywhere
  * 'abc' matches 'xxx abc xxx'
    -> '.*abc' not needed!
  * same as re.search(^pattern, ...)
re.fullmatch(pattern, string, flags
  * pattern must match entire string
  * ^.*XXX.*$ unncessary
for m in re.finditer(pattern, string)  // like search, but iter of all hits
re.findall(pattern, string) // all matches as str in array (see below)
len(re.findall(...)) // count
re.split(p, s)  // split by p; s.split(p) does not support re
re.sub(p, r, s) // subst ALL p in s by r and returns substituted string
  re.sub(r'(.*\.)(solver)$', r'\g<1>\g<2>_cls', idx) // reference groups
  re.sub(r'(.)\1{2,}', r'\1', 'aaabbbccc')  // replace duplicate chars
re.subn() // like sub, but return number of replacements


# Groups
m.groups() // returns all groups as tuple
  * length == number of (...) parts in re
m.group() // everything
m.group(0)  // everything
m.group(1)  // group 1
m.start()
m.end()

## Groups dict
m = re.search(r'^(?P<start>\d+)(-(?P<stop>\d+))?$', sel)
d = m.groupdict()
d['start'], d['stop']
  * d['stop'] == None if missing


# Flags
r'(?ism)...' // to express options in regex
re.I | re.IGNORECASE // insensitive
re.S | re.DOTALL // . matches also \n (it matches everything but . by default)
re.M | re.MULTILINE // ^ matches also is beginning of a line, not only the entire string

# Matching string over multiple lines
* `.` does not match \n by default
* Use either (.|\n)+ or re.DOTALL

re.search('Foo(.|\n)+Bar', 'Foo\nXXXX\nBarXXXX')
re.search('Foo.+Bar', 'Foo\nXXXX\nBarXXXX', re.DOTALL)


# Grep lines from file
file = open(...)
for line in file:
  m = re.search('.../([^/]+)/...')
  if m:
    lines.append(m.group(1))

# Compiling regex
* Can clearly speed-up code!
regex = re.compile(r'REGEX')
regex.(match|search|fullmatch)


# Not
re.search('^((?!abc).)*$', 'cccabcccc')  // does not match


# findall
source = "Hello World Ker HAHA"
re.findall('[\w]+', source)
-> ['Hello', 'World', 'Ker', 'HAHA']


# Capture groups

## Exclude a sub-string that must exist (positive lookahead assertion)
re.search(r'[^-]+(?=bar)', 'abcbar').group() -> abc; group() == group(0)
re.search(r'[^-]+(?=bar)', 'abcba') // fails since string does not end with 'bar'

## Ignore a group (non-capturing group)
re.search(r'(set|let) var = (\\w+|\\d+)', 'set var = 1') ->  ('set', '1')
re.search(r'(?:set|let) var = (\\w+|\\d+)', 'set var = 1') ->  ('1',)

## Named groups
m = re.fullmatch(r'(--)?(?P<name>[^=]+)(=(?P<value>[^=]+))?', flag_string)
m.group('name')
m.group('value')  // None if missing
m.groups()  // returns tuple of values
.m.groupdict() returns dict mapping group names to group values
.m.group('name')


# Escaping / raw string
* Enables using backslash '\' in string without escaping
* Use in regex when it is necessary to match '\'
print('123\345') // 123Ã¥
print(r'123\345') // 123/345


re.fullmatch(r'\d+\\\d+', r'123\456')  # matches
re.fullmatch('\d+\\\d+', r'123\456')  # does not match (re is not r)
re.fullmatch('\d+\\\\\d+', r'123\456')  # matches
re.fullmatch('\d+ \d+', '123 456')  # r not required for \d, \s, or \w
