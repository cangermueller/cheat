import re

m = re.search(pattern, string, flags)
m is None // no match

re.match(pattern, string, flags)
  * must match at beginning
  * 'abc' does not match 'xxx abc xxx'
  * 'xxx' does not match 'xxx abc xxx'
re.search(pattern, string, flags)
  * pattern must partially match anywhere
  * 'abc' matches 'xxx abc xxx'
    -> '.*abc' not needed!
  * same as re.search(^pattern, ...)
re.fullmatch(pattern, string, flags
  * pattern must match entire string
  * ^.*XXX.*$ unncessary
for m in re.finditer(pattern, string)  // like search, but iter of all hits
re.findall(pattern, string) // all matches as str in array (see below)
len(re.findall(...)) // count
re.split(p, s)  // split by p; s.split(p) does not support re


# re.sub
re.sub(p, r, s) // subst ALL p in s by r and returns substituted string
re.subn() // like sub, but return number of replacements
re.sub(r'(.*\.)(solver)$', r'\g<1>\g<2>_cls', idx) // reference groups
  * use \g<1> instead of \1 since '\123' does not replace by (group1)23!
// Backslash must be escaped in the replacement, not with re.escape!
re.sub(regex, r'\g<1>' + repl.replace('\\', '\\\\') + r'\g<2>', text)


# Groups
m.groups() // returns all groups as tuple
  * length == number of (...) parts in re
m.group() // everything
m.group(0)  // everything
m.group(1)  // group 1
m.start()
m.end()

## Groups dict
m = re.search(r'^(?P<start>\d+)(-(?P<stop>\d+))?$', sel)
d = m.groupdict()
d['start'], d['stop']
  * d['stop'] == None if missing


# Special characerts
\n: newline linux
\r\n: newline windows
\t: horizontal tab
\v: vertical tab (historic)
\f: new page (historic)
\s: any whitespace [ \n\r\t\v\f]
\S: opposite of \s [^\s]
\w: alphanumeric [a-zA-Z0-9_].
\W: opposite of \w
\b: Word boundary (end/beginning of string; before/after whitespace)


# Flags
r'(?ism)...' // to express options in regex
re.I | re.IGNORECASE // insensitive
re.S | re.DOTALL // . matches also \n (it matches everything but . by default)
re.M | re.MULTILINE // ^ matches also beginning of a line, not only the entire string
re.X | re.VERBOSE // ignores any whitespaces (' ' or \n) except '[ ]' and '\ ';
                  // # must be escaped!
  re.compile(r'''
   \d +  # digests
   [ ] \   # two spaces
     ''', re.X) == re.compile(r'\d+[ ] ')

# Matching string over multiple lines
* `.` does not match \n by default
* Use either (.|\n)+ or re.DOTALL

re.search('Foo(.|\n)+Bar', 'Foo\nXXXX\nBarXXXX')
re.search('Foo.+Bar', 'Foo\nXXXX\nBarXXXX', re.DOTALL)


# Grep lines from file
file = open(...)
for line in file:
  m = re.search('.../([^/]+)/...')
  if m:
    lines.append(m.group(1))

# Compiling regex
* Can clearly speed-up code!
regex = re.compile(r'REGEX')
regex.(match|search|fullmatch)


# Not
re.search('^((?!abc).)*$', 'cccabcccc')  // does not match


# findall
source = "Hello World Ker HAHA"
re.findall('[\w]+', source)
-> ['Hello', 'World', 'Ker', 'HAHA']


# Capture groups
(?P<name>regex): named capture group (for m.groupdict())
(?:regex): group that is ignored (not in m.groups() / m.groupdict())
(?=regex): positive lookahead; group that is not included m.group()
  * re.search(f'[a-z]+(?=\d+)', ' abc213 ').group() == 'abc'


## ?P<name> Named groups
m = re.fullmatch(r'(--)?(?P<name>[^=]+)(=(?P<value>[^=]+))?', flag_string)
m.group('name')
m.group('value')  // None if missing
m.groups()  // returns tuple of values
.m.groupdict() returns dict mapping group names to group values
.m.group('name')

## ?: Ignore a group (non-capturing group)
re.search(r'(set|let) var = (\\w+|\\d+)', 'set var = 1') ->  ('set', '1')
re.search(r'(?:set|let) var = (\\w+|\\d+)', 'set var = 1') ->  ('1',)

## ?= Exclude a sub-string that must exist (positive lookahead assertion)
re.search(r'[^-]+(?=bar)', 'abcbar').group() -> abc; group() == group(0)
re.search(r'[^-]+(?=bar)', 'abcba') // fails since string does not end with 'bar'

## Replace digests that are followed characters by 'DIGEST' (not the characters)
* Use !lookahead! for things that are not replace
re.sub(r'\d+(?=[a-z]+)', 'DIGESTS|', '123abc') == 'DIGEST|abc'

## Replace characters that are preceeded by by digests by '|CHARS (not the digests)
* Use !lookbehind! expression
* Lookbind expression must have fixed-width; \d+ does not work, only \d
re.sub(r'(?<=\d)[a-z]+', '|CHARS', '123abc')  == '123|CHARS'


# Raw string (r'', r"", r""" """)
* \ has no effect
print(r'\n') == '\n'
print(r'\\n') == '\\n'
display(r'\n') == '\\n'   // display (__repr__) escapes backslashes!

re.fullmatch(r'\d+\\\d+', r'123\456')  # matches
re.fullmatch('\d+\\\d+', r'123\456')  # does not match (re is not r)
re.fullmatch('\d+\\\\\d+', r'123\456')  # matches
re.fullmatch('\d+ \d+', '123 456')  # r not required for \d, \s, or \w

# Triple quote
* Allows line breaks (newline \n)
* Newline can be escaped unless in raw string
print('''\
a''') == 'a'

print(r'''\
a''') == '\
a'
