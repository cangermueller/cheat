# Base exceptions
* https://docs.python.org/3/library/exceptions.html#concrete-exceptions
BaseException // base for build-in errors
* SystemExit

Exception // base for non-build-in errors (
* ValueError // for invalid arguments (length, ...)
* IndexError  // invalid index
* KeyError  // (dict) key does not exist
* TypeError // invalid dtype
* IOError
* NotImplementedError
* RuntimeError // does not fit into any other category

try:
  raise Exception('error!')
except RuntimeError as e:
  handle runtime error
except ValueError as e:
  handle runtime error
except (IOError, IndexError) as e:
  handle either of these exceptions
except:
  catch everything (deprecated)
else:
  no exception
finally:
  always executed (with and without exception)


# Getting the full stack trace as a string
def get_current_stack_trace():
  exc_type, exc_value, exc_tb = sys.exc_info()
  return ''.join(traceback.format_exception(exc_type, exc_value, exc_tb))


# Re-raising exception
## No extra error message -> bare raise
try:
except BaseException:
  do_somthing()
  raise  # This location is not shown in the stack trace

## Extra error message -> raise from
try:
except BaseException as e:
  raise ValueError('Error occurred') from e


## Suppress to root source message -> raise from None
raise ValueError('Only this message is shown') from None


## What not to do
  raise e
* Python3: shows the line of `raise e` in the stack although it is not needed
           requires defining e
* Python2: does not show the source error message


# Avoid catchig BaseException (e.g. sys.exit)
except Exception as e: // does not catch BaseException (okay)
except: // does catch BaseException (never use)


# Notes
* To add additional context information

try:
  raise ValueError('Foo')
except ValueError as e:
  e.add_note('Some note')
  raise

class MyException(Exception):
  __notes__ = ['note1', 'note2']


# Exception
* To raise multipled excpetions at the same time

raise ExceptionGroup('group1', [ValueError('foo'), RuntimeError('bar')])

# except*
* To catch indiviual exceptions of an exception group
* except ValueError does not catch ExceptionGroup with ValueError
* except* catches ValueError and ExceptionGroup with ValueError

try:
  raise ExceptionGroup('group1', [ValueError('foo'), RuntimeError('bar')])
except* ValueError:
  print('ValueError')
except* RuntimeError:
  print('RuntimeError')
