# Magics
%pylab  // start pylab mode

# _tkinter.TclError: couldn't connect to display "localhost:117.0"
import matplotlib
matplotlib.use('pdf')
import matplotlib.pyplot as plt // AFTER matplotlib.use(...)!

# Interactive / Python Script / Console
## Script
import matplotlib
matplotlib.use('macosx') // Other backend of linux
import matplotlib.pyplot as plt // after use!

x = np.arange(10)
y = x * 2
fig, ax = plt.subplots()
ax.plot(x, y)
plt.show()   // shows figure

## Within ipython session
%pylab
%run script.py




# Global functions
show()  // open plot
close() // close plot
draw()  // update plot
gca() // get current axis
gcf() // get current figure
switch_backend('macosx|Qt4Agg|GTK')
ion() // interactive on
ioff()  // interactive off

# Options
figure(figsize=(width, height)) // new figure
subplot(nrow, ncol. index)  // switch to subplot
title
xticks(()), yticks(())  // no ticks
xticks(np.arange(5), ['A', 'G', 'T', 'C']) // set position and label of ticks
plt.xticks(rotation=90) // rotate xticks;
xlabel(), ylabel()
xlim(), ylim(), axis([xmin, xmax, ymin, ymax])
grid()
tight_layout()  // reduce space between subplots
ax = add_axes([left, bottom, width, height]) // create additional axes; [0;1] relative to figure

# plotting functions
plot(x, y, ...)
  linewidth=1
  linestyle=[-,--,:,-.] // solid, dashed, dotted, dashdot
  color='red'
  marker=[osdx] // oval, square, diamond, x
  markersize=1
  markerfacecolor
  markeredgecolor
  markeredgewidth
  fontsize=18
scatter(x, y, color='black', s=20, marker=matplotlib.markers?)
bar(x, y, width=barwidth) // vertical bars
barh(x, y, height=barheight)  // horizontal bars
imshow(image) // plot image (mxn array) values/heatmap
plot_surface(x, y, z, cmap=)  // from mpl_toolkits.mplot3d.axes3d import Axes3D
hist(x, bins=n, normed=False, cumulative=False)
vlines(x, vmin, vmax)
text(x, y, text, fontsize=12, ha='center', va='center', rotation=45, bbox=)
  x, y scalars, not array!
  fontweight='bold'
annotate('text', xy=(x, y), xytext=(x, y), bbox=, arrowprops=, coords=) // x, y are scalars!
  fontsize=14
  fontweight='bold'
for x, y, label in zip(all_x, all_y, all_labels):
  annotate(label, xy=(x, y), ha='left', va='bottom')


# axis
cla() // clear axis
set_title('title')
set_xlabel('x')
set_ylabel('y')
set_xlim([start, end])
axis([xmin, xmax, ymin, ymax])
set_axis_off()  // turn axis off
grid(..)
set_xscale('log')
set_xticks([1, 2, 3])  // set position of ticks
set_xticklabels(['A', 'B', 'C'])  // set labels of ticks
xaxis.ticks_bottom()
ax.axis('off')  // remove all axis
ax.spines['top'].set_visible(False) // hide line
ax.plot(ax.get_xlim(), ax.get_ylim(), ls='--', c='0.3') // diagonal line

# legend
plot(x, y, label='curve1')
plot(x, y, label='curve2')
legend(...) // plt.legend or ax.legend
  loc=best, upper [left|center|right], lower [lcr], right, center
  ncol=
  mode='expand' // horizontally
  bbox_to_anchor=(1.1, 1.05) // to place legend outside plot
  title='Title'

## legend outside
ax.legend(title=None, ncol=1, loc='left',
          bbox_to_anchor=(1.0, 1.0), *args, **kwargs)



# coordinate transformations
* fig.transFigure // [0;1] of figure
* axis.transData  // [xlim, ylim] of data
* axis.transAxes  // [0;1] of axis
* text(x, y, transform=axis.transAxes)
## bbox
bbox=dict(boxstyle=, fc='cyan', ec='black', alpha=0.5, lw=2)
boxstyle=square|round|rarrow|larrow
## arrowprops
arrowstyle=->, -|>
linewidth



# colors
## default colors
'r', 'g', 'b', 'c', 'm', 'y'  // red, green, ...
'0.0', '0.5', '1.0' // black to white
(0.5, 0.5, 0.0) // 50% red + 50% green
'#ff0000' // red

## get color by bnames
from matplotlib import colors
colors.cnames['green'] // returns hex
colors.hex2color(hex) // converts hex to RGB
colors.hex2color(colors.cnames['green']) // convert green to RGB


## color maps
'RdBu', 'RdBu_R', 'binary'  // access by string
import matplotlib.cm as cm
cmap = cm.rainbow  // color map class
cmap.RdBu is cm.get_cmap('RdBu') // get cmap by name
cmap(x)
 * map x \in [0, 1] to [r,g,b,1]
 * if x is array, adds axis with colors, e.g. 2D probs -> 4D heatmap
cmap([0.0, 0.5, 1.0])
  * return colors for different values in range ! [0, 1] !
cm.Set1([0.1, 0.5, 0.7]) // must in in range [0, 1]!
cm.rainbow(linspace(0, 1, n)) // return n colors from rainbow palette

## Seaborn
* https://stanford.edu/~mwaskom/software/seaborn/tutorial/color_palettes.html
seaborn.color_palette('Set1', 8) // 8 colors of Seaborn Set1 palette
'Dark2'
'RdBu'

## Normalize
cmap = cm.rainbow
norm = colors.Normalize(vmin=, vmax=)
mapper = cm.ScalarMappale(cmap=cmap, norm=norm)
colors = mapper.to_rgba(values)

## Plotting and saving images
ax.imshow(image)
ax.axis('off') // no axis
fig.savefig(out_file, bbox_inches='tight', transparent=True) // remove border/margin
plt.tight_layout() // apply to current figure(s)
fig.set_tight_layout(True) // apply to specific figure


# imshow / matshow for images / heatmap
* plot 2d matrix in the way it is in memory (X[0,0] top/left)
matshow(M, ...) // simple; no interpolation
imshow(M, ...)  // complex; interpolation
  * colors
  interpolation=None, nearest, bilinear, spline16, ...
  cmap='RdBu', 'RdBu_R', 'gray', 'binary', cm.RuBu
  aspect='auto', 10, 100 // adjust width/height
grid(axis='both', linestyle='') // no grid

## grey scale image (mnist)
I is m x n
imshow(I, cmap='binary')

## color image (cifar)
* use np.swapaxes to swap axes
I is m x n x 3
imshow(I)

## grid of images
from mpl_toolkits.axes_grid1 import ImageGrid
fig = plt.figure(figsize=(nrows * size, ncols * size))
  gridspec_kw={'height_ratios': [1, 2]} // to adjust size subplots
grid = ImageGrid(fig, 111,  # similar to subplot(111)
                 nrows_ncols=(nrows, ncols),
                 axes_pad=0.05, add_all=True, label_mode='L')
for ax in grid:
    x = np.random.rand(100, 100)
    ax.imshow(x)

## Colorbar
im = ax.imshow(...)
fig.colorbar(im, orientation='horizontal')
  * Don't know how to do specific for each axis
  orientation='horizontal'
  shrink=0.5  // half of axis
  fraction=0.15 // 15% of axis area used for colorbar
  aspect=20 // width x height ratio


# Animation
import matplotlib.animation
ani = animation.FuncAnimation(fig, fun, frame=n, init_fun=None)
  fig // reference to figure which is plotted
  fun(i) // function for updating fig; i = frame
  init_fun  // function for initializing plot; optional
writer = animation.FFmpegWriter(fps=n)
ani.save('file.mp4', writer=writer)

# Boxplot
bp = boxplot(data, ...) // data is 2d numpy array with distributions in columns; or list lists
  vert=False  // horizontal
  patch_artist=False
for box in bp['boxes']:
  box.set_color(color)

# Density
from scipy.stats import gaussian_kde
fun = gaussian_kde(samples)
x = np.linspace(0, 1, 100)
y = fun(x)

# contour plot
* http://matplotlib.org/examples/pylab_examples/contour_demo.html
c = ax.contour(x, ...)
  x is W x H density matrix
  colors='w' // white contour lines
ax.clabel(c, fontsize=9, inline=1) // add label to contour lines

# savefig
fig.savefig(path, ...)
  format='png'  // jpeg not supported
  bbox_inches='tight' // remove white boarder/marging
  transparent=True // transparent background

# Drawing shapes, rectangles, polygons
from matplotlib import patches

## Rectangle
rect = patches.Rectangle((x, y), width, height, ...)
  (x, y) is top-right corner; (0, 0) is top-right of image
  fill=False
  color='r'
  linewidth=2
ax.add_patch(rect)

## Polygon
poly = patches.Poly(corners, ...)
  points=[[x1, y1], [x2, y2], ...]
  fill=True
ax.add_patch(poly)


# vertical / horizontal line
axvline(x=)
axhline(y=)
