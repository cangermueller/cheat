# Misc
http://nbviewer.ipython.org/github/koldunovn/py_klimacampus/blob/master/meeting_004/Seaborn.ipynb
load_dataset(name)
  iris
  flights // time series
  titanic
  exercise
  tips  // y=tip; x=mixed



# Size, width, height
* for axes-aware functions: regplot, boxplot, kdeplot
* not: jointplot, lmplot, factorplot
plt.figure(figsize=(w, h))
sns.plot()
f, a = plt.subplots(figsize=(w, h))
sns.plot(ax=x)



# Legend
* Best: remove legend and add matplotlib axis
sns.pointplot(data=values, x='smooth', y='value', hue='cla')
ax.legend_.remove() // remove legend
legend = ax.legend(loc='upper right', mode='expand', ncol=5, ...)
  fontsize='x-large'
  title='Title' // Set title; does not seem to work (see below)
legend.texts[0].set_text('Solver') // Change legend.


# Style
set_style(...)  // grid style
  'whitegrid'
  'darkgrid'
  'ticks'
with axes_style('whitegrid'): // change settings locally

set_context(...)  // size, colors
  'notebook'  // default
  'paper'
  'talk'
  'poster'
  font_scale=1.0
with plotting_context(...)

set(...)
  context='notebook'
  style='darkgrid'
  palette='hls'
  font_scale=1.0 // for changing the fontsize





# Colors
cols = color_palette(name, length) // get colors
sns.palplot(sns.color_palette('Set1', len(legend_order))) // plot palette
set_palette(name) // set palette globally
with sns.set_palette(...): // set palette locally
  ...
choose_colorbrewer_palette(...)

## Default palettes
hls
muted
pastel
bright
dark

## Brewer palettes
choose_colorbrewer_palette(...)
  'sequential', 'divergent', 'qualitative'
Set1, Set2
RdBu, RdYlBu, RdYlGn
color_palette = sns.color_palette('Set1', len(legend_order))
sns.set_palette(color_palette)

## Sequential colors
Reds, Greens, Blues, ...
GnBu, RdBu
X_r // reverse
X_d // dark

## Good
coolwarm // alternative to RdBu
hls



# Barplot
barplot(x, y, ...)
  data=
  hue=  // color
  orient=[h|v]
  palette='RdBu'


# Boxplot / catplot
boxplot(data=, x=, y=, ...)
  x='yaxis', y='xaxis' // plot horizontally; orient='h' does not seem to work
  ax.set_xticklabels(ax.get_xticklabels(), rotation=60, ha='right') // rotate labels
    -> use fig.tight_layout() or plt.tight_layout() to prevent clipping of labels in PDF
  plt.ylim(-4, 4) // ax.set_ylim changes position of boxes!
  palette='Set1'  // fill boxes
  hue=
  dodge=True // set False to not shift different color levels
  order=['b', 'c', 'a'] // change order of labels
  showfliers=False // no outliers
  vert=False  // horizontal
violinplot(data=, x=, y=, ...)
  * Same args as boxplot; Additional args:
  inner=points,sticks,box // plot sample values
  join_rm=True  // connect dots by lines
  cut=2 // set to 0 to avoid extending the distribution past extreme points
swarmplot(...) // plots individual dots

## Boxplot with points
fig, ax = plt.subplots(figsize=(10, len(pa.anno.unique()) * 0.5));
sns.boxplot(y='anno', x='auc', data=pa, orient='h', order=pam.anno, ax=ax)
sns.stripplot(y='anno', x='auc', data=pa, orient='h', order=pam.anno) // add points



# Time series
* plot time series with confidence (sample units)
tsplot(data, ...)
  data
    data[units, timesteps, conditions]
      * 3d array
      * columns are time stamps
      * rows are sample units (variance line)
      * third dimension are conditions (different lines)
    data.columns[time, value, unit, condition] // tidy DataFrame
  time= // time column name (DataFrame)
  value= // value column name (DataFrame)
  unit= // unit column name (DataFrame)
  condition= // condition column name (DataFrame); name of conditions (array)
  color='hls' // colormap



# Heatmap
heatmap(data, ...)
  data: matrix-like numpy array or DataFrame
  annot=False // print values in cells
  fmt='d|f' // annotation format
  cmap='RdBu_r'
  xticklabels=
  yticklabels=

## Correlation matrix
c = frame.corr()
heatmap(c, xticklabels=c.columns, yticklabels=c.columns, ...)


# Correlation matrix / clustermap
grid = clustermap(data, ...) // heatmap + dendrogram
  data is matrix
  col_cluster=True  // cluster columns
  row_cluster=True  // cluster rows
  col_colors= // column colors
  row_colors= // row colors
  mask=None // binary matrix of values that are no colored
  figsize
  kwargs // arguments passed to `sns.heatmap` (see above)
    cmap='RdBu_r'
    annot=True
  metric=['euclidean', 'correlation', 'cosine', ...]
  z_score=axis // normalize axis (0/1) mean/std
  standard_scale=axis // min-max normalize axis

grid.ax_heatmap // axis heatmap
  .set_[xy]label
grid.ax_coldendrogram
  .set_title(title)
grid.ax_rowdendrogram

## Getting row/col labels
row_labels = data.index[grid.dendrogram_row.reordered_ind]


# Histogram / density plot
plt.hist(x) // matplotlib for simple histogram
kdeplot(x, shade=T, bw=)  // only kde
displot(x, ...)  // hist + kde
  x: Series / vector -> does not support dataframe!
  hist=True
  kde=True
  kde_kw={'shade', True}
  color=None
jointplot(x='x', y='y', data=data)
  * 2d scatter plot with distributions at side
  kind='(hex|kde)'
  height=6


# Regression
ax = regplot(x, y, ...)
  * no facetting; returns axis!
  * plotting linear regression
  * no hue=, cols=   <-> lmplot / factorplot
  data=None
  logistic=False

grid = lmplot(x, y, data, ...) // (see below)
  * facetting; returns grid!

grid = factorplot(x, y, ...) // x categorical
  data= // DataFrame
  col='col_var' // facet by column
  row='row_var' // facet by row
  hue='color_var'
  col_wrap=#columns
  kind='auto', 'box', 'bar', 'point'


# Lineplot
ax = sns.pointplot(data=, x=, y=, hue=, ...)
  linestyles=['-'] // styles for different hues; can not be variable!
ax.set(xlabel=, ylabel=) // changes labels

## Two lineplots side-by-side
grid = sns.FacetGrid(data=, col='dset', hue='output')
grid.map(sns.pointplot, 'x', 'y')
grid.axes[0, 0].set(xlabel=, ylabel)

## sns.lineplot
sns.lineplot(data, x=x, y=y, hue=, size=, style=, ...)
  size='var' // variable that adapts the width of lines
  ci=95: 95% confidence interval
  n_boot=100: # bootstrap samples
  n_estimator=np.mean: estimator

### Changing line width
sns.set(rc={'lines.linewidth': 2.5}) // globally
with sns.plotting_context(rc={"lines.linewidth": 2.5}): // locally
  sns.lineplot






# Scatter plot
grid = lmplot(data=data, x='x', y=y', hue='class', size=5)

regplot
  * does not support colors; no hue!
jointplot(kind='scatter') (histograms on side)
  * does not support colors; no hue!

## pairplot
grid = pairplot(data=data, x_vars='x', y_vars='y', hue='class', height=5)
  * data has format [var1, var2, var3] (not melted!)
  vars=[var1, var2] // variables shown on x and y
  [x|y]_vars=[var1, var2] // variables shown on either x or y
  kind=(scatter|hist)
  diag_kind=(kde|hist)



## matplotlib
fig, ax = plt.subplots(figsize=(8, 6))
scatter = ax.scatter(data[pc_x], data[pc_y], c=data['act_mean'], cmap='RdBu_r')
ax.set_xlabel(pc_x)
ax.set_ylabel(pc_y)
fig.colorbar(scatter)
if labels:
    for i, row in data.iterrows():
        ax.annotate('%d' % labels[i], xy=(row[pc_x], row[pc_y]))

## lmplot
* Supports facetting; don't use with FacetGrid!
grid = lmplot(x='x', y='y', data=data, ...)
  hue='color'
  palette='RdBu' // color palette
  col='col_var' // facet by column
  row='row_var' // facet by row
  hue='color_var'
  logistic=False  // logistic regression
  loess=False // loess fit
  fit_reg=False // no regression line
  legend=False // not legend if hue
  height=5 // height of the plot
  aspect=1.3 // width = aspect * height
  scatter_kws={'s': 100}  // point size
  scatter_kws={'color': 'royalblue'}  // color
  scatter_kws={'alpha': 0.3}  // transparency
grid.ax // get axis

## Adding diagonal line
ax = grid.ax
ax.plot(ax.get_xlim(), ax.get_ylim(), ls="--", c=".3")

## joint plot
* does not support colors
grid.jointplot(x='x', y='y', data=data, ...)
  kind={scatter,reg,kde,resid,hex}
  color='royalblue'
  joint_kwargs=dict() // kwargs passed to underlying plotting function
    {'s': 1} // point size if kind == 'scatter'
    {'lowess': True, 'scatter_kws': {'s': 1}} // if kind == 'reg'
  ratio=5 // ratio joint distribution vs. marginal distribution

grid.set_axis_labels('xlabel', 'ylabel')
ax = grid.ax_joint // get axis of joint plot

## Annotating points
ax = plt.gca()
for row in meta.iterrows():
  row = row[1]
  ax.annotate(row['head'], xy=(row['precision'], row['delta_log']), xytext=(3, 3), textcoords='offset points')








# Grids
## FacetGrid: facetting
* => Most relevant
* Integrated into lmplot (see below)
g = FacetGrid(data, col='col_var', row='row_var', ...)
  hue='color_var'
  col_wrap=None // # columns
  height=3  // height of each grid in inches
  aspect // width = size * aspect
  xlim=[0, 1], ylim=
  legend_out=True // Draw legend outside
  share[xy]=True // Same xlim, ylim
p = g.map(sns.pointplot, xvar, yvar, linewidth=3, marker='o', ms=6) // lineplot
  p.set_xlabels('xlabels') // xlabelS, not xlabel!
g.add_legend()
g.savefig('plot.pdf')
g.axes[i, j] // matplotlib axes
g.axes[i, j].set(xlabel=, ylabel=)  // like matplotlib
g.set_[xy]labels(...) // set_xlabels instead of set_xlabel!
for ax in g.axes: // rotate xlabel
  ax.set_xticklabels(ax.get_xticklabels(), rotation=30, ha='right')


## PairGrid: trellis plot
* one cell for every pair of variables x,y
* fun(x, y, ...)
g = PairGrid(data, ...)
  hue='color_var'
  vars=[selected variables]
  y_vars=[selected y variables]
  x_vars=[selected x variables]
  size=None
g.map(fun)
g.map_diag(fun)
g.map_offdiag(fun)
g.map_upper(fun)
g.map_lower(fun)
g.add_legend()

## JointGrid: two variables + marginals
g = JointGrid(x, y, ...)
  x // x variable
  y // y variable
  data=None // DataFrame
  size=None
g.plot(fun_joint, fun_marginals)
g.plot_joint(fun_joint, ...)
g.plot_marginals(fun_marginals, ...)


# Changing font size
with sns.plotting_context(font_scale=1.2)
ax.set_xlabel(..., fontsize=20)
ax.set_title(..., fontsize=20)
