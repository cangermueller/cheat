* Iterator is general concept
* Iterator: class with __iter__(self), __next__(self)
* Generator is function with yield that internally becomes an iterators
* Generator -- is a --> Iterator

Iterator
########
class Generator(object):
  def __init__(n):  // construct
  def __iter__(self): // initialize
    return self
  def __next__(self): // return next element
    raise StopIteration()
  def next(self): // Python2 backward compatibility
      return self.__next__()

Generator
#########
* Simplifies creation of iterators
* g = generator(n) returns generator instance
* next(g) executes g until yield

def myiter(n):
  i = 0
  while i < n:
    i += 1
    yield i

for i in myiter:
i = next(myiter)

## Example
def fibonacci(n):
    # proceed at yield() when function is called again
    # function with yield() generators iterator if __next__() method
    a = 0
    b = 1
    for i in range(n):
        c = a + b
        if i >= 1:
            a = b
            b = c
        yield c

## Copy generator
from itertools import tee
new, old = tee(old)
