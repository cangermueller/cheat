# Misc
full(shape, fill_value, dtype=None) // returns and array of shape `shape` filled with `fill_value`

# Contingency/pivot table
pandas.crosstab(y, x)

# Resizing arrays
a.resize((3, 5))  // changes shape a inplace; fills with zero
np.resize(a, (3, 5)) // returns copy; fills with values/copies of a

# keep dimension after slicing
atleast_1d(a[0, 0])
atleat_2d(a[0, :])

# chararray / strings
a = np.chararray((3, 3), ...)
  itemsize=1 // length of strings
a[0] = 'a'  // fill row with 'a'
a[0].tostring().decode() // concatenate strings of row

# Masked array
import numpy.ma as ma
m = ma.masked_array([1, 2, 3], [0, 0, 1]) // 3 is masked
m = ma.masked_array([1, 2, 3], [True, False, True]) // 1, 3 are masked
m = ma.masked_values(n, 3)  // mask value 3 in numpy array
m[, j] = ma.masked // mask value
m.data  // original data -> numpy array
m.fill_value // masking value
m[m.mask] = np.nan // change mask / fill value
m.mask  // boolean mask; m.mask[i, j] == True for missing values
m[~m.mask]  // return view on existing values
m.compressed()  // return new numpy array only with existing values
m[i, j] = ma.masked // mask value
m[i, j] is ma.masked
np.mean(m)  // only for existing values
np.log(m) // return masked array
np.log(m).data  // return array

## fill missing values
a[np.isnan(a)] = value

## functions
nanmin, nanmax, nanmean, ...


# nan/inf
nan // not a number
inf // infinite
a = array([1, nan, inf])
a.dtype // float64
isnan(a) // use this, not a != np.nan !!
isinf(a)
def complete_cases(a):
    return np.all(~np.isnan(a), axis=1)





# Performance / Efficiency
C-order: matrix stored row by row in memory // default numpy
F-oder: matrix stored column by column  // fortran
A = array(order='F')
A.stride  // stide: bytes to go to next axis
np.max(list) is bad!  // do not use np functions on lists - conversion to array



# Apply function over axis
np.apply_along_axis(fun, axis, array) 0 == columns! // returns numpy array
r = [fun(row) for row in array] // returns list

# Data type, dtype
int16 'i2'
float8  'f8'
str 'S10' == 'a10'  // str length 10
x = x.astype(np.float16, ..)  // change dtype, return copy
  copy=False // don't allocate if possible
x.view(np.float16)  // change view on dtype

## Information data type
np.finfo(np.float32) // for floating data types
np.iinfo(np.int32)  // for integer data types
  .max // maximum value
  .min // minimum value
  .eps // epsilon
np.info(np.min) // information about class, functions, etc.


# Structure array
a = np.empty((3, ), dtype=('i4, f4, a10'))  // unlabeled
a[0] = (1, 1.2, 'name')
a = np.empty((3, ), dtype=np.dtype([('id', 'i4'), ('name', 'a10')])) // labeled
np.empty((3, ), np.dtype([('name', 'S16'), ('value', 'f32')]))

# Conversion to matlab
import scipi.io as io
io.savemat('file.mat', {'a':a, 'b':b})
## Cell array
cell = np.empty((n, m), dtype=np.object)
cell[i, j] = np.ones((3, 4))

# Indexing arrays, slicing arrays
a[a > b]  // logical numpy array; not supported by default arrays
a[::2]  // every second element
(a > 1).nonzero() // return indices of values > 1
A.take([1, 2], axis=0)  // select slices along axis; return copy!
## keep dimension when slicing
a = np.array([1, 2, 3])
a[1] // 1
a[1:2] // [1] <- use slice to keep dim!
atleast_1d(a[0, 0])
atleat_2d(a[0, :])

## flatten tensor array to list representation with indices
def array_to_matrix(x):
    # last column is value; columns before is index
    v = list(np.ones(x.shape).nonzero())
    v.append(x.ravel())
    v = np.vstack(v).T
    return v

## select last dimension
a[..., 1:3]   // a can be n-d


## Selecting for each row different columns
a is 4 x 3
a[[0, 1, 2, 3], [0, 1, 2]] // select at (0, 0), (1, 1), (2, 2)
a[:, [0, 1, 2]] // will select columns 0, 1, 2 for each row!
a[[0, 1, 2, 3], [[0, 1, 2], [2, 1, 0]]
  a[0, [0, 2]]
  a[1, [1, 1]]
  a[2, [2, 0]]


## Iterating and modifying values
for idx, value = np.ndenumerate(array):
  a[idx] = value + 1


# Broadcasting
A = np.random.rand(3, 5)
b = np.arange(5)
A + b  // add row vector to each row
A + b[:,np.newaxis] // add column vector to each column
## Broadcasting rule
5 x 3 x 2
        2
5 x 3 x 2
        2

# setting options
np.set_printoption(linewidth=100, precision=4)
np.get_printoption(linewidth)
np.seterr(all=, divide=, under=, over=, divide=, invalid=)  // errors, warnings, exceptions
  ['ignore', 'warn', 'print', 'raise']
np.geterr()

# ndarray
array class
ndarray(shape, dtype, ...)
ndarray((3, 4))
## constructors
  array()
  empty()
  ones()
  zeros()
## attributes
a.size  // # elements
a.ndim  // # dimensions
a.nbytes // # bytes
a.shape
a.dtype
a.astype(float) // convert type

## initialization
arange(start, stop, step)
linspace(start, stop, num)
logspace(start, stop, num)
linspace(0, 10, 16).reshape((2, 8))
ones(5) // init vector
ones_like(M)  // the shape as M
repeat(5, n)  // repeat 5 n times
a = empty(5); a.fill(v) // fast way to fill with same value
ones((2, 8))
zeros((2, 8))
empty((2, 8))
identity(3)
eye(3)
diag([1, 2, 3]) // create diagonal matrix
diagonal(matrix)  // extract diagonal from matrix
b = a.copy(), b = np.copy(a)  // copy array
asarray(l)
  * converts non-array, e.g. list, to array
  * does not copy l if it is already an array

## functions
insert(a, index, value)
delete(a, index)
append(a, value)
concatenate((a, b, ...), axis=1)  // a, b must be 2d to be stacked as rows
hstack((a, b, ...))
vstack((a, b, ...))
dstack((a, b))

## Operations
a1 * a2 // pairwise multiplication
multiply(a1, a2)  // pairwise multiplication
  multiply(1, 2) = 2
  multiply([1, 2], [3, 4])  = [3, 8]
  multiply(A, rowvector)  // scale columns
  multiply(A, columnvector) // scale rows
dot(a1, a2) // dot product
dot(m, a) // matrix vector product
m.dot(a)  // matrix vector product
sum, mean, var, std(a)  // of all elements
sum, mean, var, std(a, 0) // over all rows
sum(a, 0) // sum vertically (over rows)
sum(a, 1) // sum horizontally (over columns)
max, min
argmax(array, axis=), argmin  // maximum/minimum (along axis)
maximum(a, b) // pairwise maximum of two arrays
clip(value, min, max) // clips value to min or max if outside (min, max)
np.unique(a, ...)
np.bincount(a) // counts frequency of each non-negative int
  [1, 1, 2, 3, 3, 3] -> [0, 2, 1, 3]
var(X, ddof=1)  // unbiased variance
np.average(X, axis, weights)  // weighted mean
  * weights must have lenght of axis
np.digitize(v, [0, 0.5, 1]) // bin/discretize values into 2 bins
a.ptp() == a.max() - a.min() // max-min; range

## io
save('data.npy', data)  // binary npy format
data = load('data.npy')
savez('data.npz', d1=d1, d2=d2) // save several objects in file
data = load('data.npz')
data['d1']; data['d2']
savetxt('data.csv', data, sep=',')
loadtxt('data.csv', sep=',')

## reshape
.reshape(3, 4)
.reshape(3, -1) // calculate missing dim
.flatten()  // matrix to vector; return copy
.ravel()  // flatten(); return reference
.squeeze(axis=None) // remove single axis, e.g 3x1 -> 3
a[:, newaxis] // vector to column vector
a = np.expand_dims(a, axis=1) // add axis to 1d vector
a.sqeeze()  // remove 1 dims, e.g. column vector to vector
hstack((a, b))  // concat left - right
vstack((a, b))  // concat top - down
concatenate((a, b), 0)  // concat -
hsplit(M, 4)  // split M into 4 parts |
vsplit(M, 4)  // split M into 4 parts -
repeat(a, n)  // repeat each element n times
tile(M, (3, 4)) // copy M 3x4

## Rolling, moving elements/values
roll(a, steps, axis=0)  // rolls VALUES
roll([1, 2, 3], 1) -> [3, 1, 2]
rollaxis(a, axis, start=0)  // moves axis to start
rollaxis(np.ones((3, 4, 2)), 1, 0) -> ((4, 3, 2))
rollaxis(np.ones((8, 3, 5, 6)), 3, 1) -> ((8, 6, 3, 5))
swapaxes(a, a1 a2)  // swap axis a1 and a2
  swapaxes((m x n), 0, 1) --> (n x m)

## boolean array
b = data[:, 5] > 5
b.sum()
b.any()
b.all()
b.nonzero()[0]  // indices where True
np.where(b)[0]  // smae a nonzero
np.in1d(a, b) // boolean mask, where True means that a is in b; isin
### Bool to int indices // like R which (b > 0)
i = x.nonzero()
  * indices where x != 0
  * len(i) = x.dim // number of dimensions
i = np.eye(3).nonzero()
  i = [[0, 1, 2], [0, 1, 2]] // diagonal elements are != 0


## comparison
array_equal // same shape and elements
array_equiv // similar shape and same elements
allclose // similar within tolerance

# mat: matrix
m = mat([[1, 2], [3, 4]])
mat('1 2; 3 4')
m.shape, shape(m) // dimension -> NOTE: attribute, no function
m[i,:]  // row vector
m[:,i]  // column vector
m * n // matrix product, not pairwise product!
m.T // transpose

# linalg
linalg.eig
linalg.det
linalg.inv
linalg.svd
linalg.norm(m, ord='norm')  // compute Frobenius norm of matrix
  sqrt(trace(m.transpose().dot(m)))
  sqrt(sum(sum(m**2)))
linalg.norm(v)  // Euclidean norm of vector
linalg.norm(m, axis=0) // Euclidean norm of all column vectors

# random
random.seed(0)
random.rand(x, y, z)  // ndarray from [0, 1]
random.randn(x, y, y) // ndarray form N(0, 1)
random.randint(low, high, size)
random.uniform(low, hight, size)
random.normal(mean, std, size)
random.shuffle(array) // shuffle entries inplace
random.choice(array, size, replace=False)  // sample (without) replacement from array
  * array must be np.ndarray, not list with different datatypes
  * return np.ndarray, not list
  * use random.sample for sample from list

## Random state
rng = np.random.RandomState(0)
rng.rand(5, 10)
rng.norm(0, 1, 10)
rng.get_state()[1][0] // returns seed

# correlation coefficient
-> Scipy correlation better
np.cov(x, y)  // covariance matrix
np.corrcoef(x, y) // correlation matrix (not single coefficient!)
  * x and y are vectors
  * if x is matrix and y is None, computes correlation between all columns in x
np.corrcoef(x, y)[0, 1] // correlation coefficient


# testing
np.allclose(a, 1.0)
np.alltrue(a == 1.0)
-> return True/False: assertTrue(np.allclose(a, 1.0))
-> better: numpy.testing

import numpy.testing as npt
npt.assert_ // throw exception which is recognized by unittest
assert_array_equal(a, b)  // exact
assert_array_less(a, b)
assert_allclose(a, 1.9) // approx
assert_allclose(a, b) // approx

Sorting
=======
a.sort() // sort in-place
np.sort(a) // sort out-of place
np.sort(a)[::-1]  // sort reverse
np.lexsort((b, a)) // sort two columns; first by b, then by a
.argsort()  // order

reverse argsort
---------------
a = x.argsort()
ar = np.empty(len(a))
ar[a] = np.arange(len(a))


# Quantiles / percentiles
quantile(values, range, ...)
  * Only for newer numpy versions
  range: float or list between 0 and 1
percentile(values, range, ...)
  range: float or list between 0 and 100



# Discretize / digitize / quantize values

def discretize(values, num_bins=4):
  values = np.asarray(values)
  bins = []
  if num_bins > 1:
    pct = np.linspace(0, 100, num=num_bins + 1)
    bins = np.percentile(values, pct)
  return np.digitize(values, bins)


# String formatting numpy arrray
np.array2string(array, ...)
  threshold=80 // max number of characters before ... will be used
