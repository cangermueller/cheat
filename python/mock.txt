# Misc
from absl.testing.absltest import mock


# Mock, MagicMock, autospec
MagicMock() // accepts anything (also non-existing __len__, __getitem__)
Mock() // does not accept anything, but with another signature
Mock(..., autospec=True) // requires the same signature (recommended)
m = mock.create_autospec(Class, ...) // create mock with required signature (recommended)
  spec_set=True (default False) // disallow assigning non-existing attributes
  instance=True // whether to create an instance of the class. Otherwise m is a callable and m() creates an instance



# Asserts
assert_not_called()
assert_called()
assert_called_once()
assert_called_with(*args, **kwargs) // the last call contains these args
assert_called_once_with(*args, **kwargs) // called_once with these args
assert_any_call(*args, **kwargs) // any called must had these args
mock.call_count


# Comparing some arguments
call_args // call args of last call
call_args_list // call args of all call
args, kwargs = mock.call_args
kwargs.contain(x)


# Comparing all arguments
assert_called_with(*args, **kwargs) // the last call contains these args
assert_called_once_with(*args, **kwargs) // called_once with these args
assert_any_call(*args, **kwargs) // any called must had these args

## Using mock.call
assert_called_once_with(mock.Call(mock.Any, a=1, b=2))

expected_calls = [mock.mock(1, b=2, c=mock.ANY), mock.mock(1, b=3, c=mock.Any)]
my_mock.assert_has_calls(expected_calls, any_order=False)
  * contains a subset of calls
actual_calls = my_mock.mock_calls
self.assertSequenceEqual(actual_calls, expected_calls)
  * calls match exactly

## Matchers
mock.ANY
pymock/matchers.py
https://callee.readthedocs.io/en/latest/guide/usage.html


# return_value vs side_effect
return_value=1 // single value
side_effect=[1, 2, 3] // iterable of values or function


# decorator
@mock.patch.object(other_lib.Class, 'method')
def test_something(self):


# setting up patcher in setUp()
go/python-tips/032
def setUp(self):
  super().setUp()  #  If we override setUp, we must call super()!
  self.mock_upload_meme = self.enter_context(mock.patch.object(
      memegen_client, 'UploadMeme', autospec=True))


# Changing default arguments
def my_fun(a, b=1, c=2, **kwargs):  // my_fun.__defaults__ == (1, 2)
  pass

## Method 1
mock.patch.object(module.my_fun, '__defaults__', (1, 3)): // change to c=3
  ...

## Method 2
mock.patch.object(module, 'my_fun', functools.partial(module.my_fun, c=3))
  ...


# mocking a constant
mock.patch.object(module, 'CONSTANT', new='42')


# mocking a class attribute
mock.patch.object(module.Class, 'attribute', new='42')
mock.patch.multiple(module.Class, attribute=42)


# mocking multiple things in one call
with mock.patch.multiple(Foo, A=2, B=3):
  ...


# mocking a sequence of calls
x = mock.Mock()
y = mock.Mock()
mocks = mock.Mock()
mocks.attach_mock(x.SomeMethod, 'SomeMethod')
mocks.attach_mock(y.OtherMethod, 'OtherMethod')

x.SomeMethod('abc')
y.OtherMethod()
x.SomeMethod('xyz');

mocks.assert_has_calls([mock.call.SomeMethod('abc'),
                        mock.call.OtherMethod(),
                        mock.call.SomeMethod('xyz')])


# mocking abstract class methods
with mock.patch.multiple(AbstractClass, __abstractmethods__={}):
  _ = AbstractClass()


# mock environment variable
with mock.patch.dict(os.environ, {'foo': '1'}, ...):
  clear=True // (default False) whether to clear the dict before setting values
