# Misc
from absl.testing.absltest import mock


# Asserts
assert_not_called()
assert_called()
assert_called_once()
assert_called_with(*args, **kwargs) // the last call contains these args
assert_called_once_with(*args, **kwargs) // called_once with these args
assert_any_call(*args, **kwargs) // any called must had these args
mock.call_count

# Comparing a sequence of mocks
expected_calls = [mock.mock(1, b=2, c=mock.ANY), mock.mock(1, b=3, c=mock.Any)]
my_mock.assert_has_calls(expected_calls, any_order=False)
  * contains a subset of calls
actual_calls = my_mock.mock_calls
self.assertSequenceEqual(actual_calls, expected_calls)
  * calls match exactly


# Testing if call args contain
call_args // call args of last call
call_args_list // call args of all call
args, kwargs = mock.call_args
kwargs.contain(x)


# Patching
mock.patch.object(module, 'object_name', ...)
mock.patch.dict(module.my_dict, {'mock': 'dict}, ...)


# Mocking-out objects
patcher = mock.patch.object(reference, 'fun_name', [fun]):
  reference: module / module.Class
  fun: function to replace `reference.fun_name`
  return_value=1: Change return value of fun_name

m = patcher.start()
m.call_count


# Example 1
def _decode_jpeg_mock(...):
  ...

def test_ReadFda(self, ignored_tag, ignored_key):
  with mock.patch.object(topcon_converter_utils, 'decode_jpeg',
                         _decode_jpeg_mock):
    ...


# Example 2

class _MockEstimator():
  pass

def test_build_labeled_dataset_from_csv(self):
  with mock.patch.object(inference_estimator, 'InfererEstimator',
                          _MockEstimator):

-> inference_estimator must be imported in test file
-> replaces inference_estimator.InfererEstimator by _MockEstimator


# Example 3
@mock.patch.object(topcon_converter_utils, 'decode_jpeg', _decode_jpeg_mock):
def test_ReadFda(self,  mock):
  mock.return_value = 'hello'


# Creating mock object
object = mock.MagicMock()
object.BindAndQuery.side_effect = [RETURN_1ST_CALL, RETURN_2ND_CALL]



# Example 4
* Mock-out class method
with mock.patch.object(apt.AptamerDNNProblem, '_load_inferrer'):
  problem = apt.AptamerDNNProblem()

# Example 5
* Testing if method was called
update_mock = mock.patch.object(
  solver, '_update_model_based_parameters',
  side_effect=solver._update_model_based_parameters).start()
loss_infos = solver.train_with_model(
  *solver.population.to_structures_and_rewards(), num_rounds=1)
update_mock.assert_called_once()


# Wrapping a class
object = MyClass()
wrapped = mock.Mock(wraps=object)
wrapped.foo() // will call object.foo if foo() is a method of object
wrapped.bar() // will return default mock (?) if bar() is not a method of object


# return_value vs side_effect
return_value=1 // single value
side_effect=[1, 2, 3] // iterable of values or function


# decorator
@mock.patch.object(other_lib.Class, 'method')
def test_something(self):


# setting up patcher in setUp()
go/python-tips/032
def setUp(self):
  super().setUp()  #  If we override setUp, we must call super()!
  self.mock_upload_meme = self.enter_context(mock.patch.object(
      memegen_client, 'UploadMeme', autospec=True))


# Changing default arguments
def my_fun(a, b=1, c=2, **kwargs):  // my_fun.__defaults__ == (1, 2)
  pass

## Method 1
mock.patch.object(module.my_fun, '__defaults__', (1, 3)): // change to c=3
  ...

## Method 2
mock.patch.object(module, 'my_fun', functools.partial(module.my_fun, c=3))
  ...


# Mocking __call__ of class
with mock.patch.object(my_lib.MyClass, '__call__', autospec=True) as m:
  ...


# autospec=True
Default disabled (None). If True, arguments and return value if the mock will
have the same type. Type is checked; exception if called with wrong type.


# mocking a constant
mock.patch.object(module, 'CONSTANT', new='42')
