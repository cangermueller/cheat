import argparse

p = argparse.ArgumentParser(...)
  prog=sys.argv[0]  // program name
  description=''
# Attributes
* prog  // program name
* epilog  // long description
* version // program version
* formatte_class =  // change formatting of options
  * ArgumentDefaultsHelpFormatter
  * RawDescriptionHelpFormatter
  * RawTextHelpFormatter

# Methods
* print_help
* print_usage

## add_argument('--file', ...=
add_argument('files', help='input filename', nargs='+') // positional argument
add_argument('--arg') // only long options; -a does not work; --args works
add_argument('--verbose', action='store_true')
add_argument('--no-verbose', action='store_false', dest='verbose')
* type=int  // filetype
* type=fun  // fun is function that converts argument
* type=argparse.FileType('r') // readable file
* default='file.txt'  // default value
  * NOTE: does not work for parse_args(args, class)!!
  * set default by class.arg = default
* help='input filename' // help text
* metavar='FILE'  // show --file FILE in help text
* action='store_true'
    store, store_true, store_false
    'const', const=10, nargs='?' // --head -> store 10 if not arg
    https://docs.python.org/3/library/argparse.html#action
* nargs='1' // NUM, ?, *, +
  nargs='+', opts.files is None // if no files given
  nargs='*', None if not --opt; [] if --opt
* choices=['red', 'green', 'blue']
* dest='variable_name'  // use different variable name in namespace
  * use metavar='shown' for renaming positional arguments
* required=True // make --arg required
set_default(verbose=False)

## add_mutually_exclusive_group
g = add_mutually_exlusive_group()
g.add_argument('--verbose')
g.add_argument('-q', '--quiet')

# Accessing arguments
opts = p.parse_args(...)  // argparse.Namespace type
  args=my_args[1:]  // use own args (without program name) instead of sys.argv
  namespace=x  // add to existing namespace (class) x
opts.infile
for name, value in vars(opts):  // namespace -> dict

# argparse.Namespace
ns = argparse.Namespace(a=1, b=2)
ns.a; ns.b
ns.c = 10

# Sub-commands
ap = argparse.ArgumentParser('Print content of file')
sp = ap.add_subparsers(dest='cmd') // cmd is used to identify sub-command
ap1 = sp.add_parser('cmd1', help='Help of cmd1')
ap1.add_argument('--cmd1-opt1')
ap1.add_argument('--cmd1-opt2')
ap2 = sp.add_parser('cmd2')
ap2.add_argument('--cmd2-opt1')
ap.add_argument('file')
opts = ap.parse_args()

# Read input optionally from stdin
add_argument('filenames', help='Input files', nargs='*')
if len(filenames) == 0 and not sys.stdin.isatty:
  filenames = sys.stdin.readlines()

# Groups
* For grouping arguments in --help dialog
g = p.add_argument_group('other arguments', description=None)
g.add_argument(...)

# Forwarding/passing unused args
opts, unknown_opts = parser.parse_known_args(args[1:])
  opts is namespace, e.g. opts.foo
  unknown_opts is list of args, e.g. ['--foo' '-b']
p.add_argument('rest', nargs=argparse.REMAINDER)
 * arg.parse.REMAINDER == '...', similar to '*'


# Boolean flag
p.add_argument(
    '-f', '--foo',
    action=argparse.BooleanOptionalAction,
    default=True,  # False if not specified (default)
    help='Foo'
)
# opts.foo is None (if unset)
-f, --foo  # opts.foo == True
--no-f, --no-foo  # opts.foo == False
--foo=(1|true)  # does not work
