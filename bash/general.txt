# Options
stty -ixon  //disable <c-s> flow control
set -e  // exit on error
set +e  // do not exit on error
set -x  // print executed command
shopt -s expand_aliases // enable aliases in scripts
shopt -s extglob // extended ls !(abc|cde) globs


# Diff lines that are in file1 but not file2
grep -F -x -v -f file2 file1



# Terminate function on exception / error
if [[ $? -ne 0 ]]; then
  kill -INT $$
fi


# Variable scopes
var1=1 // global
function fun {
  local var1=100 // local
  var1=101 // does not change global var1
  }
echo $var1 // 1


# Template file
* http://serverfault.com/questions/287688/templating-with-linux-in-a-shell-script/699377#699377
source $config_file // with variables param1=10
template=$(cat $template file) // contains "echo $param1"
eval $template


# Alias
type ALIASNAME // show definition
shopt -s expand_aliases // enable aliases in scripts\2
source script.sh



# Redirection
x>&y // forward x to y
echo 'Error' 1>&2 // stdout to stderr
1>&2 echo 'Error' // same as before
module avail 2>&1 | less // pipe stderr
cmd 2>&1 | tee $log_file
kill -INT $$ // exit function stack without existing script


# Multi-line string
var="line1\n
line2\n
line3"
cat <<- EOF
line1
line1
EOF  // must be at the beginning of the line (no trailing spaces!)


# Show linux version
cat /proc/version
cat /etc/redhat-release

# chmod, chown
-R  // recursively

# Loop over stdin
cmd | while read line; do

# Loop over lines in file
while read line; do
  ...
done < file.txt

# Loop over lines with spaces
ifs=$IFS
IFS=$'\n'
while line in $string; do
  ...
done
IFS=$ifs



# services / demons
service NAME COMMAND
  stop
  start
  restart
service --status-all // list all services

# open ports
sudo netstat -tulpn

# File operations
dirname $file
basename $file
readlink -f $file // absolute path; resolve symbolic links
realpath $file  // on MAC; external program


# Arrays, split string into words
a=(one two three)
a=($@) // strings to list
${a[0]} // first element
${a[*]} // all elements -> convert to list again
${#a[*]}  // length
${a[${#a[*]}-1]} // last element
unset a[${#a[*]}-1] remove last element
     |-> no '$' !


## Pop last element of list
local args=($@)
name=${args[${#args[*]}-1]}
unset args[${#args[*]}-1]
args=${args[*]}


# Parameter Expansion / Variables
man bash -> Parameter Expansion
${!v*}  // expand variable name
${v:-value} // assign value if undefined
${v:?msg}  // print msg if unset
${file.tar.gz%.*} // file.tar
${file.tar.gz%%.*} // file
${file.tar.gz#*.} // tar.gz
${file.tar.gz##*.} // gz
${#s} // length
${s:from:length}  // substr, starting from 0
${s:0:3} == ${s::3} // first three letters
${s:5} // starting from the 6ths letter
${s::-1} // remove the last letter
${s:(-3)} // last three letters
${s/pattern/replace}
${s//pattern/replace} // replace all
sadasd


# History expansion
* man bash -> HISTORY EXPANSION
history // last last commands

# Parameter Expansion
man bash -> Parameter Expansion

## Event designator
!id // execute command with id
!!  // last command
!-1 // last command
!-n // n last command
!str  // last command starting with string

## Word designator
EVENT:WORD  // !!:WORD
!!^ // first argument last command
!!$ // last argument last command
!!:n  // nth word
!!:n-$  // nth - end
!!:n*  // nth - end

# Debugging
set -e  // exit on error
set -x // print executed command
bash -x file.sh // print executed command

# ssh
ssh-genkey
ssh-copy-id host


# File system
mount // show file system
df  // show statistics about file system
fdisk // partitions
diskutil info /Volumns/hdd

# variables
* $0: script name
* $$: process id
* $!: id of last process ran in background
* $?: return value

# color output
GREEN=$(tput setaf 2; tput bold)
YELLOW=$(tput setaf 3)
RED=$(tput setaf 1)
echo -e "$RED Hello world"
