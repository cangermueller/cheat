# Misc
https://devhints.io/vimscript
V // select entire line


# Man pages
Shift-K / <leader>K // open manpage over keyword
runtime ftplugin/man.vim
:Man less


# Path expansion
<c-r>=expand('%:p')<cr>
:echo expand('%:p')
%:.  // filename relative to cwd (/CWD/dirname/basename.abc)
%:t // basename (basename.abc)
%:p // absolute file name (/CWD/dirname/basename.abc)
%:h  // directory (/CWD/dirname)
%:p:h  // absolute directory
%:r // remove extension
%:p:r // absolute filename without extension
pwd // cwd path
:cd // change working directory

# Python
:python3 print(sys.path)

# Folding
zr, zR // open all folds (recursively)
zm, zM // close all folds (recursively)
za, zA // toggle
zo, zO // open
zc, zC // close


# Running shell
:sh // starts shell; <c-d> to quit shell
!cmd

# Joining / concatenating lines
J // with space
gJ // without space

# Recording mode / Macro
q[0-9,a-z] // start recording mode which is saved to @[0-9a-x]
:%s/foo/bar/g // execute commands that are recorded
...
q // stop recording
@x // replay recording x

# Edit key bindings
R   // start replace mode
## change
I   // insert at beginning
a   // insert at next position
A   // insert at end
o   // insert next line
O   // insert previous line
c^  // change till first character of line
c0  // change till beginning of line
C   // change till end of line
S   // change whole line

## delete
d^  // delete until first character of line
d0  // delete until beginning of line
D   // delete until end of line
X   // delete character before cursor
x   // delete character after cursor



# diff files
1) open files in windows (vert/hor)
2) execute :diffthis in both windows (:windo diffthis)
dp  // diff put
do  // diff obtain
vimdiff files+
\D  // diff windows

# Mark
m[a-z]  // set mark in current file
m[A-Z]  // set global mark -> saved on exit file
'[a-zA-Z] // go to LINE of mark
`[a-zA-Z] // to to position of mark
d'a // delete until mark
d`a // delete until position mark
`.  // go to last edited position
`0  // go to last edited file
`1  // go to 2nd last edited file
``  // jump back
c-6 or c-^ // toggle with last open file; same as :e #
:marks  // list all marks
:marks A, B // list selected marks


# Motions / nagivation
_ // to beginning of line
g_  // to end of line
H // cursor to head of page
M // cursor to middle of page
L // cursor to bottom of page
zt  // current line to top
zz  // current line to center
zb  // current line to botton

# Moving lines/parts
:m lineno
:m 0  // to beginning of doc
:m $  // to end of doc




# Command completion
:help ins-completion
## Naviation
c-p // previous
c-n // next
c-y // accept (yes)
c-e // end completion
c-l // delete last character

## Types
c-x c-k // word from dictionary
c-x c-f // file
c-x c-o // command
c-x c-l // line
c-x c-n // next
c-x c-p // previous
c-x c-v // vim command line; !ht.. for bash command completion


# vimgrep
=> EasyGrep
* case depends on ignorecase
:vimgrep word file1 file2 ...
  **/*.py // search recursively in py files
:vimgrep word f*
:vimgrep/pattern/[jg] f*
  j // do not jump to first match
  g // add line only once
:vimgrep /pattern/[jg] **/*.py // search recursively

## custom
:vg --> vimgrep // cabbr
\cw // open quickfix
\cj,k // navigate


# Range, positioning
x, y // absolute line numbers
. // current line
.+1 // add 1 to current line
.-1 // add -1 to current line
$ // end of file
% // the entire file
?pattern? // from pattern
/pattern/ // to pattern
?pattern?,. // copy from pattern to current line
:x  // go to line x
:/pat // go to first line containing pat
:x;/pat // go to x and search for pat afterwards


# Changes
:changes  // show last changes
g;  // go back
g,  // go forward

# key-codes
:tab help key-codes
<C->  control
<S->  shift
<M-> alt or meta key
<Space>

# Put
p // after cursor
P // before cursor
10p // 10 times
Middle mouse; "*p // put c-c clipboard
]p  // put and indent

# Mouse
set mouse=a // activate mouse in all modes
opt/alt + selection // terminal selection
middle mouse  // insert

# Insert mode key bindings
<c-x> fnplo // extension
      s // spelling extension
<c-o> CMD   // command mode
<c-w> // delete left word
<c-h> // delete left character
<c-u> // delete until beginning of line
<s-j> // wrap line
<c-d> // left indent <
<c-t> // right indent >
<c-r> i: insert from buffer 0 to command line

# Jumping, scrolling
<c-y> // scoll up slowly
<c-e> // scoll down slowly
--
<c-d> // scroll down block
<c-u> // scroll up block
--
<c-f> // scroll down page
<c-b> // scroll up page
--
<c-r> // redo change
H // top of page
M // middle of page
L // bottom of page

# Scrolling
z., zz  // to middle
zt  // to top
zb  // to bottom
zh, zH, zl, zL, zs  // horizontally



# Working directory
:pwd  // show current working director
:cd // change working directory

# Windows newline carriage ^M return
<c-v><c-m>
:map <Leader>vn mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

# Wrap text
set textwidth=80
gq
set colorcolumn=80  // 80
set cc=+1 // +1 after textwidth

# Encryption
:X  // enter key
:w  // write + encrypt
:set key= // disable encryption
:setlocal cm=zip  // weak, default
:setlocal cm=blowfish // strong

# Spell correction
[s  // previous
]s  // next
z=  // list corrections
zk  // correct
zg  // add to good list

# Compilation
./configure --prefix /home/ca426/opt/stow/vim74 --enable-rubyinterp
--enable-pythoninterp --enable-perlinterp --enable-gui=auto --enable-cscope
--enable-multibyte --with-x --with-features=huge

# Macport
sudo port install vim +huge +python37 +perl +ruby +gtk2

# Installing bundles
vim +BundleInstall +qall

# Movements
()  // sentence
[z  // start of current open fold
]z  // end of current open fold
zjk // next, previous fold

# formatting
gq<motion>
gw<motion>
gqap  // format current paragraph
=<motion> // C-indenting; filter through external program
[p  // paste and reformat



# Delete characters
* dl, dh, dj, dk
* x, X


# Registers
* :reg  // display all registers
* :reg x  // display content of register x
* <C-r> x // paste in insert mode from register x

* ": default register used for yank and delete; used for paste (`p`) by default

* 0: default register used for yank (not delete)
* A, B, C, D  // append to named register
" 1, 2, ...: last delete register

# Variables
let // show all variables
unlet a // unset variable
let a = 1
let @a = 1  // write to register
let &o = 1  // write option

## Environment variables
echo $v // show value
let $v = 1  // define value


# Options / options
set magic // set
set nomagic // unset
set nomagic? // show value

## Types
buffer-variable    b:     Local to the current buffer.
window-variable    w:     Local to the current window.
tabpage-variable   t:     Local to the current tab page.
global-variable    g:     Global.
local-variable     l:     Local to a function.
script-variable    s:     Local to a :source'ed Vim script.
function-argument  a:     Function argument (only inside a function).
vim-variable       v:     Global, predefined by Vim.

# Options
set rtp+=~/.vim/bundle/plugin # extend runtime path





# Visual mode
* range:
  * '<: start line
  * '>: end line
  * `<: start character
  * `>: end character
v // enter visual
V // select current line
ctrl-v  // select columns
gv  // last selection

# tags
identifier of function; stored in tag list (generated by ctags)
<C-]> // jump to tag under cursor
<C-}> // open tag in preview window
:tags // show tag stack; > is current position
<C-T> // previous tag
:pop  // previous tag
:tag  // next tag
<C-w ]> // open tag in window
<C-w }> // open tag in preview window
<C-w z> // close preview window

# Filtering
* :[range]!prog // filter range by program
* !!prog  // filter current line by program
* 3!!prog // filter next three lines by program

# Commands
command Thelp tab help
command -nargs=* Thelp tab help <args>
command -nargs=1 Emod call OpenMod("<args>") // Command `Emod` with one argument
:cabbr th tab help  // abbreviate command

# Buffers
:ls, :buffers  // list buffers
:b2 //open buffer 2
:bnext, :bNext, :bprev // navigate
:bfirst, :blast
:sbnext, :sbprev  // split and navigate
:vertical sbnext  // split vertically


# Functions
function! MyFunc(path, by) abort
  let path = a:path // use a: to access argument variable
  for name in ['s1', 's2', 's2'] // for loop
    let path = substitute(path, name, a:by, 'g') // use let for assignment!
  endfor
  exec "e" path // execute command
  return path
endfunction

[abort] // function will terminate as soon as error occurred

:echo MyFunc("p1.p2") // print output
:call MyFunc("p1.p2") // call function without doing anything
map <leader>x :call MyFunc('abc')<cr>
:exec 'tab new' MyFunc('abc') // use function output as argument
  :exec 'e abc' // executes string


# Search, substitute, replace
/\V...  // search literal; only / must be escaped
## Misc
s/ /\r/g // substitute space by newline

## Regex
\vPATTERN // very magic, no escaping necessary, except for
 \ -> \\
 . -> \.
 { -> \{

%s/\v"(\d+)\.(\d+)\./"\1-\2./gc
g/\v\/\/third_party\/py\/(ipdb|pudb)/d // / must be still escaped when using \v
\mPATTER // magic (default)


# Non-greedy
foo{-}bar  // instead of foo.+?bar



## Deleting / filtering lines that match pattern
g/pattern
g/pattern/d // delete
g!/pattern/d  // delete lines that do not match pattern


## Search for string in buffer
ctrl-r 0  # paste copied text in command line
ctrl-r ctrl-w # paste current word in command line
:h cmdline-editing


# Common errors
# pymode lint error after package update
find . -name \*.pyc -delete

# vim keymap mode
map // normal, visual, select, operator-pending
cmap // command line
xmap // visual
vmap // visual and select
omap // operator-pending (movement commands, e.g. 'w' for next work', that can be combined with yw, for example)
map! // insert and command line
