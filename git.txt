# Adding local repository to GitHub
Create new repository on GitHub
git remote add origin https://github.com/cangermueller/deepcpg2.git
git push -u origin master

# Storing user,pass,auth
git config credential.helper store

# Merging
<<<<<<< HEAD
Stuff in own branch
=======
Stuff in merged branch
>>>>>>> ca35f63885df20778cad7a40c9e26e222c380ee2

# Branches
checkout -b new_branch // create and switch to new branch from current one
checkout HEAD~2 -b new_branch // checkout certain version as new branch
checkout 213123 // checkout in temp branch
branch -m new // rename current branch to new
branch -d name // delete branch
branch -dr origin/keras2 // delete remote branch locally
push origin --delete keras2 // delete remote branch on github

# Misc
status -u // show untracked files
add -f *.pdf  // add .gitignore files
git checkout-index -a -f --prefix=/path/  // checkout current branch to dir

# Ignoring files
.gitignore  // shared
.git/info/exclude // not shared
## Pattern
name
dir/
/dir_at_root/
**/sub_dir/**

# Remote repository
remote  // show remote branches
remote show hpc // show infos about remote hpc
remote add name url
remote remove NAME // delete remote rep. and all branches
fetch name  // update local branches -> see branch -r
push name src_branch:dst_branch
push name master:child/master // push master to name/child/master
push name master:refs/remotes/X/master  // push to remote branch X/master on name
push -u name r1:sync/r2
  * push r1 to sync/r2 on name
  * set upstream information -> pull will use name sync/r2
push name --delete branch // delete remote branch
pull name master  // pull master from name

## Different pull / push branches
[branch "master"]
	remote = hpc
	merge = refs/heads/sync/master
[remote "hpc"]
	url = hpc:~/research/bs/dev/160921_deepcpg-dev/src
	fetch = +refs/heads/*:refs/remotes/hpc/*

# Undo changes
git checkout file.py  // single file
git reset --hard  // all changes


# Commit messages
file.h: fix bug at line 88

Fix bug at line 88 caused by division of zero.

* Imperative, present
* First line
    * file: update changes
    * title
    * no full stop
    * present, imparative
    * &lt 50 characters
* Whitespace
* Description
  * Present, imperative
  * &lt50 characters

# Nested repository
/main_rep
  git clone src nested_rep
* main_rep ignores nested_rep
* nested_rep is independent of main_rep
* nested_rep has own .git
* git clone main_rep does not clone nested_rep
<-> submodules
  * nested_rep does not have .git
  * submodules can be checked out from main_rep



# Submodules

## git submodule CMD
* status  // status information
* init // add entry for all modules in .gitmodules to .git/config
* update  // checkout head
* .git/modules  // configuration files, e.g. info/exclude

## Checkout all submodule
* git clone --recurse-submodules
* git submodule init
* git submodule update

## Addding fresh submodule
* git submodule add git://github.com... [PATH]
* git commit

## Addding checked out submodule: exactly the same as before!
* git submodule add git://github.com... [PATH]
* git commit

## Removing submodule
https://gist.github.com/myusuf3/7f645819ded92bda6677




# tag
tag -a -m 'First version' v0.1  // create annotated tag with message -m
-l -n [1] // show first line of annotation
git push --tags

# describe
describe  // show description of current tag

# checkout branches and files
log // show last commits
checkout ID // checkout branch in tmp branch
checkout -B tmp ID  // checkout branch in new branch tmp
checkout ID -- file // checkout single file into current branch

# rebase
## idea
A - B - master
     \
       develop

develop is checked out:

git fetch upstream
git rebase upstream/master
A - B - master
             \
               develop

more transparent than merge:
http://stackoverflow.com/questions/16666089/whats-the-difference-between-git-merge-and-git-rebase
* git push -f origin branch // overwrite changes after rebase

## interactive rebase
* to skip, merge, amend past commits
* http://stackoverflow.com/questions/495345/removing-selected-commit-log-entries-for-a-git-repository
git rebase -i HEAD~5  // HEAD~5 point to last clean commit before change
git rebase --abort
git rebase --continue

# Diff
diff branch1..branch2 // diff between branches
